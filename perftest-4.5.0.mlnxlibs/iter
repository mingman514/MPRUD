src/send_lat.c:	if (ibv_query_gid(ctx->context,user_param->ib_port,user_param->gid_index,&mcg_params->port_gid)) {
src/send_lat.c:	if (ibv_query_pkey(ctx->context,user_param->ib_port,DEF_PKEY_IDX,&mcg_params->pkey)) {
src/send_lat.c:	if (ibv_query_port(ctx->context,user_param->ib_port,&port_attr)) {
src/send_lat.c:	mcg_params->ib_port = user_param->ib_port;
src/send_lat.c:	if (!strcmp(link_layer_str(user_param->link_type),"IB")) {
src/send_lat.c:	if (user_param->use_mcg) {
src/send_lat.c:		mcg_params->user_mgid = user_param->user_mgid;
src/send_lat.c:		set_multicast_gid(mcg_params,ctx->qp[0]->qp_num,(int)user_param->machine);
src/send_lat.c:		for (i=0; i < user_param->num_of_qps; i++) {
src/send_lat.c:	if (user_param->use_mcg) {
src/send_lat.c:		for (i=0; i < user_param->num_of_qps; i++) {
src/send_lat.c:		if (!strcmp(link_layer_str(user_param->link_type),"IB")) {
src/send_bw.c:	if (ibv_query_gid(ctx->context,user_param->ib_port,user_param->gid_index,&mcg_params->port_gid)) {
src/send_bw.c:	if (ibv_query_pkey(ctx->context,user_param->ib_port,DEF_PKEY_IDX,&mcg_params->pkey)) {
src/send_bw.c:	if (ibv_query_port(ctx->context,user_param->ib_port,&port_attr)) {
src/send_bw.c:	mcg_params->ib_port = user_param->ib_port;
src/send_bw.c:	if (!strcmp(link_layer_str(user_param->link_type),"IB")) {
src/send_bw.c:	if (user_param->use_mcg && (user_param->duplex || user_param->machine == SERVER)) {
src/send_bw.c:		mcg_params->user_mgid = user_param->user_mgid;
src/send_bw.c:		set_multicast_gid(mcg_params,ctx->qp[0]->qp_num,(int)user_param->machine);
src/send_bw.c:		for (i=0; i < user_param->num_of_qps; i++) {
src/send_bw.c:	if (user_param->use_mcg) {
src/send_bw.c:		if (user_param->duplex || user_param->machine == SERVER) {
src/send_bw.c:			for (i=0; i < user_param->num_of_qps; i++) {
src/send_bw.c:		if (!strcmp(link_layer_str(user_param->link_type),"IB")) {
src/perftest_resources.c:	int wr_index = index*user_param->post_list;
src/perftest_resources.c:			user_param->size);
src/perftest_resources.c:			user_param->size);
src/perftest_resources.c:	tmp_file_name = (user_param->machine == SERVER) ? SERVER_FD : CLIENT_FD;
src/perftest_resources.c:	srq_init_attr.attr.max_wr = user_param->rx_depth;
src/perftest_resources.c:	if(user_param->verb == SEND)
src/perftest_resources.c:	int num_of_qps = user_param->num_of_qps / 2;
src/perftest_resources.c:	if ( (!(user_param->duplex || user_param->tst == LAT) && (user_param->machine == SERVER) )
src/perftest_resources.c:			|| ((user_param->duplex || user_param->tst == LAT) && (qp_index >= num_of_qps))) {
src/perftest_resources.c:		qp_init_attr.cap.max_recv_wr  = user_param->rx_depth;
src/perftest_resources.c:		qp_init_attr.cap.max_inline_data = user_param->inline_size;
src/perftest_resources.c:		qp_init_attr.cap.max_send_wr = user_param->tx_depth;
src/perftest_resources.c:		qp_init_attr.cap.max_inline_data = user_param->inline_size;
src/perftest_resources.c:	if (user_param->verb == ATOMIC) {
src/perftest_resources.c:		opcode = opcode_atomic_array[user_param->atomicType];
src/perftest_resources.c:		opcode = opcode_verbs_array[user_param->verb];
src/perftest_resources.c:	if (user_param->use_res_domain) {
src/perftest_resources.c:	int num_of_qps = user_param->num_of_qps;
src/perftest_resources.c:	int num_of_qps_per_port = user_param->num_of_qps / 2;
src/perftest_resources.c:	if (user_param->duplex || user_param->tst == LAT) {
src/perftest_resources.c:	if (user_param->dualport == ON && (dct_index % num_of_qps >= num_of_qps_per_port))
src/perftest_resources.c:		port_num = user_param->ib_port2;
src/perftest_resources.c:		port_num = user_param->ib_port;
src/perftest_resources.c:	if (user_param->verb == WRITE)
src/perftest_resources.c:	else if (user_param->verb == READ)
src/perftest_resources.c:	else if (user_param->verb == ATOMIC)
src/perftest_resources.c:		.cq = (user_param->verb == SEND && (user_param->duplex || user_param->tst == LAT)) ? ctx->recv_cq : ctx->send_cq,
src/perftest_resources.c:		.dc_key = user_param->dct_key,
src/perftest_resources.c:		.tclass = user_param->traffic_class,
src/perftest_resources.c:		.mtu = user_param->curr_mtu,
src/perftest_resources.c:		.pkey_index = user_param->pkey_index,
src/perftest_resources.c:		.gid_index = user_param->gid_index,
src/perftest_resources.c:		.inline_size = user_param->inline_size,
src/perftest_resources.c:	} else if (dcqattr.dc_key != user_param->dct_key) {
src/perftest_resources.c:				(unsigned long long)user_param->dct_key);
src/perftest_resources.c:	attr.cap.max_send_wr  = user_param->tx_depth;
src/perftest_resources.c:	attr.cap.max_inline_data = user_param->inline_size;
src/perftest_resources.c:	attr.cap.max_recv_wr  = user_param->rx_depth;
src/perftest_resources.c:		attr.qpg.parent_attrib.rss_child_count = user_param->num_of_qps - 1;
src/perftest_resources.c:	int is_udp_ps = user_param->connection_type == UD || user_param->connection_type == RawEth;
src/perftest_resources.c:	struct rdma_cm_id **cm_id = (user_param->machine == CLIENT) ? &ctx->cm_id : &ctx->cm_id_control;
src/perftest_resources.c:	if (user_param->machine == CLIENT) {
src/perftest_resources.c:	ctx->cycle_buffer = user_param->cycle_buffer;
src/perftest_resources.c:	ctx->cache_line_size = user_param->cache_line_size;
src/perftest_resources.c:	ALLOCATE(user_param->port_by_qp, uint64_t, user_param->num_of_qps);
src/perftest_resources.c:	tarr_size = (user_param->noPeak) ? 1 : user_param->iters*user_param->num_of_qps;
src/perftest_resources.c:	ALLOCATE(user_param->tposted, cycles_t, tarr_size);
src/perftest_resources.c:	memset(user_param->tposted, 0, sizeof(cycles_t)*tarr_size);
src/perftest_resources.c:	if ((user_param->tst == LAT || user_param->tst == FS_RATE) && user_param->test_type == DURATION)
src/perftest_resources.c:		ALLOCATE(user_param->tcompleted, cycles_t, 1);
src/perftest_resources.c:	ALLOCATE(ctx->qp, struct ibv_qp*, user_param->num_of_qps);
src/perftest_resources.c:	ALLOCATE(ctx->qpx, struct ibv_qp_ex*, user_param->num_of_qps);
src/perftest_resources.c:	ALLOCATE(ctx->mr, struct ibv_mr*, user_param->num_of_qps);
src/perftest_resources.c:	ALLOCATE(ctx->buf, void* , user_param->num_of_qps);
src/perftest_resources.c:	ALLOCATE(ctx->qp_burst_family, struct ibv_exp_qp_burst_family*, user_param->num_of_qps);
src/perftest_resources.c:	if (user_param->connection_type == DC) {
src/perftest_resources.c:		ALLOCATE(ctx->dct, struct ibv_exp_dct*, user_param->num_of_qps);
src/perftest_resources.c:		ALLOCATE(ctx->dct, struct ibv_dct*, user_param->num_of_qps);
src/perftest_resources.c:	if ((user_param->tst == BW || user_param->tst == LAT_BY_BW) && (user_param->machine == CLIENT || user_param->duplex)) {
src/perftest_resources.c:		ALLOCATE(user_param->tcompleted,cycles_t,tarr_size);
src/perftest_resources.c:		memset(user_param->tcompleted, 0, sizeof(cycles_t)*tarr_size);
src/perftest_resources.c:		ALLOCATE(ctx->my_addr,uint64_t,user_param->num_of_qps);
src/perftest_resources.c:		ALLOCATE(ctx->rem_addr,uint64_t,user_param->num_of_qps);
src/perftest_resources.c:		ALLOCATE(ctx->scnt,uint64_t,user_param->num_of_qps);
src/perftest_resources.c:		ALLOCATE(ctx->ccnt,uint64_t,user_param->num_of_qps);
src/perftest_resources.c:		memset(ctx->scnt, 0, user_param->num_of_qps * sizeof (uint64_t));
src/perftest_resources.c:		memset(ctx->ccnt, 0, user_param->num_of_qps * sizeof (uint64_t));
src/perftest_resources.c:	} else if ((user_param->tst == BW || user_param->tst == LAT_BY_BW)
src/perftest_resources.c:		   && user_param->verb == SEND && user_param->machine == SERVER) {
src/perftest_resources.c:		ALLOCATE(ctx->my_addr, uint64_t, user_param->num_of_qps);
src/perftest_resources.c:		ALLOCATE(user_param->tcompleted, cycles_t, 1);
src/perftest_resources.c:	} else if (user_param->tst == FS_RATE && user_param->test_type == ITERATIONS) {
src/perftest_resources.c:		ALLOCATE(user_param->tcompleted, cycles_t, tarr_size);
src/perftest_resources.c:		memset(user_param->tcompleted, 0, sizeof(cycles_t) * tarr_size);
src/perftest_resources.c:	if (user_param->machine == CLIENT || user_param->tst == LAT || user_param->duplex) {
src/perftest_resources.c:		ALLOCATE(ctx->sge_list, struct ibv_sge,user_param->num_of_qps * user_param->post_list);
src/perftest_resources.c:		ALLOCATE(ctx->exp_wr, struct ibv_exp_send_wr, user_param->num_of_qps * user_param->post_list);
src/perftest_resources.c:		ALLOCATE(ctx->wr, struct ibv_send_wr, user_param->num_of_qps * user_param->post_list);
src/perftest_resources.c:		if ((user_param->verb == SEND && user_param->connection_type == UD ) || user_param->connection_type == DC) {
src/perftest_resources.c:			ALLOCATE(ctx->ah, struct ibv_ah*, user_param->num_of_qps);
src/perftest_resources.c:	if (user_param->verb == SEND && (user_param->tst == LAT || user_param->machine == SERVER || user_param->duplex)) {
src/perftest_resources.c:		ALLOCATE(ctx->recv_sge_list,struct ibv_sge,user_param->num_of_qps);
src/perftest_resources.c:		ALLOCATE(ctx->rwr,struct ibv_recv_wr,user_param->num_of_qps);
src/perftest_resources.c:		ALLOCATE(ctx->rx_buffer_addr,uint64_t,user_param->num_of_qps);
src/perftest_resources.c:	if (user_param->mac_fwd == ON )
src/perftest_resources.c:		ctx->cycle_buffer = user_param->size * user_param->rx_depth;
src/perftest_resources.c:	ctx->size = user_param->size;
src/perftest_resources.c:	num_of_qps_factor = (user_param->mr_per_qp) ? 1 : user_param->num_of_qps;
src/perftest_resources.c:				 ctx->cache_line_size) * 2 * num_of_qps_factor * user_param->flows;
src/perftest_resources.c:	ctx->flow_buff_size = ctx->send_qp_buff_size / user_param->flows;
src/perftest_resources.c:	user_param->buff_size = ctx->buff_size;
src/perftest_resources.c:	if (user_param->connection_type == UD)
src/perftest_resources.c:	int num_of_qps = user_param->num_of_qps;
src/perftest_resources.c:	if (user_param->wait_destroy) {
src/perftest_resources.c:		       user_param->wait_destroy);
src/perftest_resources.c:		sleep(user_param->wait_destroy);
src/perftest_resources.c:	dereg_counter = (user_param->mr_per_qp) ? user_param->num_of_qps : 1;
src/perftest_resources.c:	if (user_param->work_rdma_cm == ON) {
src/perftest_resources.c:	if (user_param->work_rdma_cm == ON)
src/perftest_resources.c:	if (user_param->duplex || user_param->tst == LAT) {
src/perftest_resources.c:	if (user_param->use_rss)
src/perftest_resources.c:	for (i = first; i < user_param->num_of_qps; i++) {
src/perftest_resources.c:		if (( (user_param->connection_type == DC && !((!(user_param->duplex || user_param->tst == LAT) && (user_param->machine == SERVER) )
src/perftest_resources.c:							|| ((user_param->duplex || user_param->tst == LAT) && (i >= num_of_qps)))) ||
src/perftest_resources.c:					user_param->connection_type == UD) && (user_param->tst == LAT || user_param->machine == CLIENT || user_param->duplex)) {
src/perftest_resources.c:		if (user_param->connection_type == DC && ((!(user_param->duplex || user_param->tst == LAT)
src/perftest_resources.c:						&& (user_param->machine == SERVER)) || ((user_param->duplex || user_param->tst == LAT) && (i >= num_of_qps)))) {
src/perftest_resources.c:			if ( i == user_param->num_of_qps -1 )
src/perftest_resources.c:			if (user_param->work_rdma_cm == OFF) {
src/perftest_resources.c:	if (user_param->use_rss) {
src/perftest_resources.c:		if (user_param->connection_type == UD && (user_param->tst == LAT || user_param->machine == CLIENT || user_param->duplex)) {
src/perftest_resources.c:	if (user_param->srq_exists) {
src/perftest_resources.c:	if (user_param->use_xrc) {
src/perftest_resources.c:	if (user_param->verb == SEND && (user_param->tst == LAT || user_param->machine == SERVER || user_param->duplex || (ctx->channel)) ) {
src/perftest_resources.c:		if (!(user_param->connection_type == DC && user_param->machine == SERVER)) {
src/perftest_resources.c:	if (user_param->verb == SEND && user_param->work_rdma_cm == ON && ctx->send_rcredit) {
src/perftest_resources.c:	if (user_param->use_rdma_cm == OFF) {
src/perftest_resources.c:	if (user_param->use_cuda) {
src/perftest_resources.c:	if (user_param->mmap_file != NULL) {
src/perftest_resources.c:			if (user_param->use_hugepages) {
src/perftest_resources.c:	if ((user_param->tst == BW || user_param->tst == LAT_BY_BW ) && (user_param->machine == CLIENT || user_param->duplex)) {
src/perftest_resources.c:		free(user_param->tposted);
src/perftest_resources.c:		free(user_param->tcompleted);
src/perftest_resources.c:	else if ((user_param->tst == BW || user_param->tst == LAT_BY_BW ) && user_param->verb == SEND && user_param->machine == SERVER) {
src/perftest_resources.c:		free(user_param->tposted);
src/perftest_resources.c:		free(user_param->tcompleted);
src/perftest_resources.c:	if (user_param->machine == CLIENT || user_param->tst == LAT || user_param->duplex) {
src/perftest_resources.c:	if (user_param->verb == SEND && (user_param->tst == LAT || user_param->machine == SERVER || user_param->duplex)) {
src/perftest_resources.c:	if (user_param->work_rdma_cm == ON) {
src/perftest_resources.c:	} else if (dattr.inline_recv_sz < user_param->inline_recv_size) {
src/perftest_resources.c:			dattr.inline_recv_sz, user_param->inline_recv_size);
src/perftest_resources.c:					user_param->num_of_qps, NULL, ctx->channel, user_param->eq_num);
src/perftest_resources.c:		ctx->recv_cq = ibv_create_cq(ctx->context,user_param->rx_depth *
src/perftest_resources.c:						user_param->num_of_qps, NULL, ctx->channel, user_param->eq_num);
src/perftest_resources.c:	if (user_param->use_res_domain) {
src/perftest_resources.c:	if (user_param->verb_type == ACCL_INTF) {
src/perftest_resources.c:						user_param->num_of_qps, NULL,
src/perftest_resources.c:		ctx->recv_cq = ibv_create_cq(ctx->context,user_param->rx_depth *
src/perftest_resources.c:						user_param->num_of_qps,NULL,ctx->channel,0);
src/perftest_resources.c:	if (user_param->verb_type == ACCL_INTF) {
src/perftest_resources.c:	int tx_buffer_depth = user_param->tx_depth;
src/perftest_resources.c:	if (user_param->connection_type == DC) {
src/perftest_resources.c:		dct_only = (user_param->machine == SERVER && !(user_param->duplex || user_param->tst == LAT));
src/perftest_resources.c:		tx_buffer_depth = user_param->rx_depth;
src/perftest_resources.c:	if ((user_param->connection_type == DC && !dct_only) || (user_param->verb == SEND))
src/perftest_resources.c:	if (user_param->is_exp_cq)
src/perftest_resources.c:	if (user_param->tst == BW)
src/perftest_resources.c:	else if (user_param->tst == LAT)
src/perftest_resources.c:	if (user_param->use_odp) {
src/perftest_resources.c:	if (user_param->use_cuda) {
src/perftest_resources.c:	if (user_param->mmap_file != NULL) {
src/perftest_resources.c:		posix_memalign(ctx->buf, user_param->cycle_buffer, ctx->buff_size);
src/perftest_resources.c:		ctx->buf = memalign(user_param->cycle_buffer, ctx->buff_size);
src/perftest_resources.c:		if (pp_init_mmap(ctx, ctx->buff_size, user_param->mmap_file,
src/perftest_resources.c:				 user_param->mmap_offset))
src/perftest_resources.c:			posix_memalign(&ctx->buf[qp_index], user_param->cycle_buffer, ctx->buff_size);
src/perftest_resources.c:			if (user_param->use_hugepages) {
src/perftest_resources.c:				ctx->buf[qp_index] = memalign(user_param->cycle_buffer, ctx->buff_size);
src/perftest_resources.c:	if (user_param->verb == WRITE) {
src/perftest_resources.c:	} else if (user_param->verb == READ) {
src/perftest_resources.c:		if (user_param->transport_type == IBV_TRANSPORT_IWARP)
src/perftest_resources.c:	} else if (user_param->verb == ATOMIC) {
src/perftest_resources.c:	if (ctx->is_contig_supported == SUCCESS || user_param->use_odp) {
src/perftest_resources.c:	if (!user_param->use_cuda) {
src/perftest_resources.c:		if (user_param->verb == WRITE && user_param->tst == LAT) {
src/perftest_resources.c:	for (i = 1; i < user_param->num_of_qps; i++) {
src/perftest_resources.c:		if (user_param->mr_per_qp) {
src/perftest_resources.c:	if(user_param->use_event) {
src/perftest_resources.c:		if(user_param->eq_num > context->num_comp_vectors) {
src/perftest_resources.c:	if (user_param->connection_type == RC) {
src/perftest_resources.c:	} else if (user_param->connection_type == XRC) {
src/perftest_resources.c:	} else if (user_param->connection_type == UD) {
src/perftest_resources.c:	} else if (user_param->connection_type == UC) {
src/perftest_resources.c:	} else if (user_param->connection_type == DC) {
src/perftest_resources.c:	int num_of_qps = user_param->num_of_qps / 2;
src/perftest_resources.c:	if (user_param->use_ooo) {
src/perftest_resources.c:	if (user_param->use_hugepages) {
src/perftest_resources.c:	if (user_param->use_event) {
src/perftest_resources.c:	if (user_param->use_res_domain) {
src/perftest_resources.c:	if (user_param->use_xrc) {
src/perftest_resources.c:	if (user_param->use_srq && !user_param->use_xrc && (user_param->tst == LAT ||
src/perftest_resources.c:				user_param->machine == SERVER || user_param->duplex == ON)) {
src/perftest_resources.c:				.max_wr  = user_param->rx_depth,
src/perftest_resources.c:	if (user_param->use_rss) {
src/perftest_resources.c:		if (user_param->num_of_qps > attr.max_rss_tbl_sz + 1) {
src/perftest_resources.c:	if (!(user_param->work_rdma_cm == OFF || ctx->cm_id))
src/perftest_resources.c:	for (i=0; i < user_param->num_of_qps; i++) {
src/perftest_resources.c:		if (user_param->work_rdma_cm == OFF) {
src/perftest_resources.c:			if (user_param->verb_type == ACCL_INTF) {
src/perftest_resources.c:	if (qp_index == 0 && user_param->use_rss) {
src/perftest_resources.c:	if(user_param->connection_type == DC) {
src/perftest_resources.c:		if ( !((!(user_param->duplex || user_param->tst == LAT) && (user_param->machine == SERVER) )
src/perftest_resources.c:					|| ((user_param->duplex || user_param->tst == LAT) && (qp_index >= num_of_qps)))) {
src/perftest_resources.c:	if (user_param->use_xrc) {
src/perftest_resources.c:	is_dc_tgt_query |= !(user_param->duplex || user_param->tst == LAT) && (user_param->machine == SERVER);
src/perftest_resources.c:	is_dc_tgt_query |= (user_param->duplex || user_param->tst == LAT) && (i >= num_of_qps);
src/perftest_resources.c:	is_dc_tgt_query &= user_param->connection_type == DC;
src/perftest_resources.c:	} else if (user_param->use_rss && user_param->connection_type == RawEth) {
src/perftest_resources.c:	} else if (user_param->use_xrc) {
src/perftest_resources.c:	query = (user_param->connection_type == DC);
src/perftest_resources.c:	query |= (user_param->use_rss && user_param->connection_type == RawEth);
src/perftest_resources.c:	query |= user_param->use_xrc;
src/perftest_resources.c:	query |= user_param->inline_recv_size != 0;
src/perftest_resources.c:	query |= user_param->masked_atomics;
src/perftest_resources.c:	query |= user_param->verb_type != NORMAL_INTF;
src/perftest_resources.c:	query |= user_param->use_res_domain;
src/perftest_resources.c:	query |= user_param->use_exp;
src/perftest_resources.c:		user_param->is_exp_qp = 1;
src/perftest_resources.c:	if (user_param->is_exp_qp)
src/perftest_resources.c:	if (user_param->masked_atomics) {
src/perftest_resources.c:	if (user_param->inline_recv_size) {
src/perftest_resources.c:		attr.max_inl_recv = user_param->inline_recv_size;
src/perftest_resources.c:		attr.sq_sig_all = (1 == user_param->cq_mod) ? 1 : 0; //inline receive on requestor must QP's sq_sig_all to be applied
src/perftest_resources.c:	if (user_param->use_res_domain) {
src/perftest_resources.c:	attr.recv_cq = (user_param->verb == SEND) ? ctx->recv_cq : ctx->send_cq;
src/perftest_resources.c:	attr.cap.max_send_wr  = user_param->tx_depth;
src/perftest_resources.c:	attr.cap.max_inline_data = user_param->inline_size;
src/perftest_resources.c:	if (user_param->use_srq && (user_param->tst == LAT || user_param->machine == SERVER || user_param->duplex == ON)) {
src/perftest_resources.c:		attr.cap.max_recv_wr  = user_param->rx_depth;
src/perftest_resources.c:	switch (user_param->connection_type) {
src/perftest_resources.c:	if (!user_param->disable_fcs && (user_param->connection_type == RawEth)) {
src/perftest_resources.c:	if (user_param->inline_recv_size > attr.max_inl_recv)
src/perftest_resources.c:				attr.max_inl_recv, user_param->inline_recv_size);
src/perftest_resources.c:	if (user_param->inline_size > attr.cap.max_inline_data) {
src/perftest_resources.c:		user_param->inline_size = attr.cap.max_inline_data;
src/perftest_resources.c:			attr.cap.max_inline_data, user_param->inline_size);
src/perftest_resources.c:	attr.recv_cq = (user_param->verb == SEND) ? ctx->recv_cq : ctx->send_cq;
src/perftest_resources.c:	attr.cap.max_send_wr  = user_param->tx_depth;
src/perftest_resources.c:	attr.cap.max_inline_data = user_param->inline_size;
src/perftest_resources.c:	if (user_param->use_srq && (user_param->tst == LAT || user_param->machine == SERVER || user_param->duplex == ON)) {
src/perftest_resources.c:		attr.cap.max_recv_wr  = user_param->rx_depth;
src/perftest_resources.c:	switch (user_param->connection_type) {
src/perftest_resources.c:	if (user_param->verb == ATOMIC) {
src/perftest_resources.c:		opcode = opcode_atomic_array[user_param->atomicType];
src/perftest_resources.c:		opcode = opcode_verbs_array[user_param->verb];
src/perftest_resources.c:	if (user_param->work_rdma_cm) {
src/perftest_resources.c:		fprintf(stderr, "Current TX depth is %d and  inline size is %d .\n", user_param->tx_depth, user_param->inline_size);
src/perftest_resources.c:	if (user_param->inline_size > attr.cap.max_inline_data) {
src/perftest_resources.c:		user_param->inline_size = attr.cap.max_inline_data;
src/perftest_resources.c:			attr.cap.max_inline_data, user_param->inline_size);
src/perftest_resources.c:	attr.recv_cq = (user_param->verb == SEND) ? ctx->recv_cq : ctx->send_cq;
src/perftest_resources.c:	attr.cap.max_send_wr  = user_param->tx_depth;
src/perftest_resources.c:	attr.cap.max_inline_data = user_param->inline_size;
src/perftest_resources.c:	if (user_param->use_srq && (user_param->tst == LAT || user_param->machine == SERVER || user_param->duplex == ON)) {
src/perftest_resources.c:		attr.cap.max_recv_wr  = user_param->rx_depth;
src/perftest_resources.c:	switch (user_param->connection_type) {
src/perftest_resources.c:	int num_of_qps = user_param->num_of_qps;
src/perftest_resources.c:	int num_of_qps_per_port = user_param->num_of_qps / 2;
src/perftest_resources.c:	attr.pkey_index      = user_param->pkey_index;
src/perftest_resources.c:	attr.dct_key = user_param->dct_key;
src/perftest_resources.c:	if (user_param->duplex || user_param->tst == LAT) {
src/perftest_resources.c:	if (user_param->dualport==ON) {
src/perftest_resources.c:			attr.port_num = user_param->ib_port;
src/perftest_resources.c:			user_param->port_by_qp[portindex] = 0;
src/perftest_resources.c:			attr.port_num = user_param->ib_port2;
src/perftest_resources.c:			user_param->port_by_qp[portindex] = 1;
src/perftest_resources.c:		attr.port_num = user_param->ib_port;
src/perftest_resources.c:	int num_of_qps = user_param->num_of_qps;
src/perftest_resources.c:	int num_of_qps_per_port = user_param->num_of_qps / 2;
src/perftest_resources.c:	attr.pkey_index      = user_param->pkey_index;
src/perftest_resources.c:	if ( user_param->use_xrc && (user_param->duplex || user_param->tst == LAT)) {
src/perftest_resources.c:	if (user_param->dualport==ON) {
src/perftest_resources.c:			attr.port_num = user_param->ib_port;
src/perftest_resources.c:			user_param->port_by_qp[portindex] = 0;
src/perftest_resources.c:			attr.port_num = user_param->ib_port2;
src/perftest_resources.c:			user_param->port_by_qp[portindex] = 1;
src/perftest_resources.c:		attr.port_num = user_param->ib_port;
src/perftest_resources.c:	if (user_param->connection_type == RawEth) {
src/perftest_resources.c:	} else if (user_param->connection_type == UD) {
src/perftest_resources.c:		switch (user_param->verb) {
src/perftest_resources.c:	if (user_param->masked_atomics) {
src/perftest_resources.c:	if ( (init_flag != 0 && user_param->use_rss) || user_param->masked_atomics ) {
src/perftest_resources.c:	int num_of_qps = user_param->num_of_qps;
src/perftest_resources.c:	int num_of_qps_per_port = user_param->num_of_qps / 2;
src/perftest_resources.c:	if (user_param->duplex || user_param->tst == LAT) {
src/perftest_resources.c:	if (user_param->dualport == ON && (qpindex % num_of_qps >= num_of_qps_per_port))
src/perftest_resources.c:		attr->ah_attr.port_num = user_param->ib_port2;
src/perftest_resources.c:		attr->ah_attr.port_num = user_param->ib_port;
src/perftest_resources.c:	attr->ah_attr.dlid = (user_param->dlid) ? user_param->dlid : dest->lid;
src/perftest_resources.c:	if (user_param->gid_index == DEF_GID_INDEX) {
src/perftest_resources.c:		attr->ah_attr.sl = user_param->sl;
src/perftest_resources.c:		attr->ah_attr.grh.sgid_index = user_param->gid_index;
src/perftest_resources.c:		attr->ah_attr.grh.traffic_class = user_param->traffic_class;
src/perftest_resources.c:	attr->dct_key = user_param->dct_key;
src/perftest_resources.c:	attr->path_mtu = user_param->curr_mtu;
src/perftest_resources.c:	int num_of_qps = user_param->num_of_qps;
src/perftest_resources.c:	int num_of_qps_per_port = user_param->num_of_qps / 2;
src/perftest_resources.c:	if ( user_param->use_xrc && (user_param->duplex || user_param->tst == LAT)) {
src/perftest_resources.c:	if (user_param->dualport == ON && (qpindex % num_of_qps >= num_of_qps_per_port))
src/perftest_resources.c:		attr->ah_attr.port_num = user_param->ib_port2;
src/perftest_resources.c:		attr->ah_attr.port_num = user_param->ib_port;
src/perftest_resources.c:	if (user_param->connection_type != RawEth) {
src/perftest_resources.c:		attr->ah_attr.dlid = (user_param->dlid) ? user_param->dlid : dest->lid;
src/perftest_resources.c:		attr->ah_attr.sl = user_param->sl;
src/perftest_resources.c:		if (((attr->ah_attr.port_num == user_param->ib_port) && (user_param->gid_index == DEF_GID_INDEX))
src/perftest_resources.c:				|| ((attr->ah_attr.port_num == user_param->ib_port2) && (user_param->gid_index2 == DEF_GID_INDEX) && user_param->dualport)) {
src/perftest_resources.c:			attr->ah_attr.grh.sgid_index = (attr->ah_attr.port_num == user_param->ib_port) ? user_param->gid_index : user_param->gid_index2;
src/perftest_resources.c:			attr->ah_attr.grh.traffic_class = user_param->traffic_class;
src/perftest_resources.c:		if (user_param->connection_type != UD) {
src/perftest_resources.c:			attr->path_mtu = user_param->curr_mtu;
src/perftest_resources.c:			if (user_param->connection_type == RC || user_param->connection_type == XRC) {
src/perftest_resources.c:	else if (user_param->raw_qos) {
src/perftest_resources.c:		attr->ah_attr.sl = user_param->sl;
src/perftest_resources.c:	if (user_param->use_ooo)
src/perftest_resources.c:	attr->timeout   = user_param->qp_timeout;
src/perftest_resources.c:	if (user_param->connection_type != RawEth) {
src/perftest_resources.c:		if (user_param->connection_type == RC || user_param->connection_type == XRC) {
src/perftest_resources.c:			attr->timeout   = user_param->qp_timeout;
src/perftest_resources.c:	if (user_param->rate_limit_type == PP_RATE_LIMIT) {
src/perftest_resources.c:		((struct ibv_exp_qp_attr*)_attr)->rate_limit = user_param->rate_limit;
src/perftest_resources.c:			user_param->burst_size;
src/perftest_resources.c:			user_param->typical_pkt_size;
src/perftest_resources.c:	if (user_param->rate_limit_type == PP_RATE_LIMIT) {
src/perftest_resources.c:		attr->rate_limit = user_param->rate_limit;
src/perftest_resources.c:	if((user_param->use_xrc || user_param->connection_type == DC) && (user_param->duplex || user_param->tst == LAT)) {
src/perftest_resources.c:		xrc_offset = user_param->num_of_qps / 2;
src/perftest_resources.c:	for (i=0; i < user_param->num_of_qps; i++) {
src/perftest_resources.c:		if (user_param->connection_type == DC) {
src/perftest_resources.c:			if ( ((!(user_param->duplex || user_param->tst == LAT) && (user_param->machine == SERVER) )
src/perftest_resources.c:						|| ((user_param->duplex || user_param->tst == LAT) && (i >= user_param->num_of_qps/2)))) {
src/perftest_resources.c:		if (user_param->rate_limit_type == HW_RATE_LIMIT)
src/perftest_resources.c:			attr.ah_attr.static_rate = user_param->valid_hw_rate_limit_index;
src/perftest_resources.c:		if (user_param->rate_limit_type == PP_RATE_LIMIT) {
src/perftest_resources.c:			    (user_param->burst_size || user_param->typical_pkt_size)) {
src/perftest_resources.c:		if ((i >= xrc_offset) && (user_param->use_xrc || user_param->connection_type == DC) && (user_param->duplex || user_param->tst == LAT))
src/perftest_resources.c:		if(user_param->connection_type == DC) {
src/perftest_resources.c:		if (user_param->tst == LAT || user_param->machine == CLIENT || user_param->duplex) {
src/perftest_resources.c:			if(user_param->connection_type == DC) {
src/perftest_resources.c:				if (user_param->rate_limit_type == PP_RATE_LIMIT) {
src/perftest_resources.c:		if ((user_param->connection_type == UD || user_param->connection_type == DC) &&
src/perftest_resources.c:				(user_param->tst == LAT || user_param->machine == CLIENT || user_param->duplex)) {
src/perftest_resources.c:			if(user_param->connection_type == DC)
src/perftest_resources.c:		if (user_param->rate_limit_type == HW_RATE_LIMIT) {
src/perftest_resources.c:			   qp_static_rate != user_param->valid_hw_rate_limit_index ||
src/perftest_resources.c:			   user_param->link_type != IBV_LINK_LAYER_INFINIBAND) {
src/perftest_resources.c:				if(!user_param->is_rate_limit_type) {
src/perftest_resources.c:					user_param->rate_limit_type = SW_RATE_LIMIT;
src/perftest_resources.c:		if((user_param->use_xrc || user_param->connection_type == DC) && (user_param->duplex || user_param->tst == LAT))
src/perftest_resources.c:			xrc_offset = user_param->num_of_qps / 2;
src/perftest_resources.c:	if (user_param->use_exp == 1) {
src/perftest_resources.c:	int num_of_qps = user_param->num_of_qps;
src/perftest_resources.c:	if((user_param->use_xrc || user_param->connection_type == DC) && (user_param->duplex || user_param->tst == LAT)) {
src/perftest_resources.c:		memset(&ctx->exp_wr[i*user_param->post_list],0,sizeof(struct ibv_exp_send_wr));
src/perftest_resources.c:		ctx->sge_list[i*user_param->post_list].addr = (uintptr_t)ctx->buf[i];
src/perftest_resources.c:		if (user_param->mac_fwd) {
src/perftest_resources.c:			if (user_param->mr_per_qp) {
src/perftest_resources.c:				ctx->sge_list[i*user_param->post_list].addr =
src/perftest_resources.c:				ctx->sge_list[i*user_param->post_list].addr = (uintptr_t)ctx->buf[i];
src/perftest_resources.c:		if (user_param->verb == WRITE || user_param->verb == READ)
src/perftest_resources.c:			ctx->exp_wr[i*user_param->post_list].wr.rdma.remote_addr   = rem_dest[xrc_offset + i].vaddr;
src/perftest_resources.c:		else if (user_param->verb == ATOMIC)
src/perftest_resources.c:			ctx->exp_wr[i*user_param->post_list].wr.atomic.remote_addr = rem_dest[xrc_offset + i].vaddr;
src/perftest_resources.c:		if (user_param->tst == BW || user_param->tst == LAT_BY_BW ) {
src/perftest_resources.c:			if (user_param->verb != SEND)
src/perftest_resources.c:		for (j = 0; j < user_param->post_list; j++) {
src/perftest_resources.c:			ctx->sge_list[i*user_param->post_list + j].length =
src/perftest_resources.c:				(user_param->connection_type == RawEth) ? (user_param->size - HW_CRC_ADDITION) : user_param->size;
src/perftest_resources.c:			ctx->sge_list[i*user_param->post_list + j].lkey = ctx->mr[i]->lkey;
src/perftest_resources.c:				ctx->sge_list[i*user_param->post_list +j].addr = ctx->sge_list[i*user_param->post_list + (j-1)].addr;
src/perftest_resources.c:				if ((user_param->tst == BW || user_param->tst == LAT_BY_BW) && user_param->size <= (ctx->cycle_buffer / 2))
src/perftest_resources.c:					increase_loc_addr(&ctx->sge_list[i*user_param->post_list +j],user_param->size,
src/perftest_resources.c:			ctx->exp_wr[i*user_param->post_list + j].sg_list = &ctx->sge_list[i*user_param->post_list + j];
src/perftest_resources.c:			ctx->exp_wr[i*user_param->post_list + j].num_sge = MAX_SEND_SGE;
src/perftest_resources.c:			ctx->exp_wr[i*user_param->post_list + j].wr_id   = i;
src/perftest_resources.c:			if (j == (user_param->post_list - 1)) {
src/perftest_resources.c:				ctx->exp_wr[i*user_param->post_list + j].next = NULL;
src/perftest_resources.c:				ctx->exp_wr[i*user_param->post_list + j].next = &ctx->exp_wr[i*user_param->post_list+j+1];
src/perftest_resources.c:			if ((j + 1) % user_param->cq_mod == 0) {
src/perftest_resources.c:				if (user_param->verb_type == ACCL_INTF)
src/perftest_resources.c:					ctx->exp_wr[i*user_param->post_list + j].exp_send_flags = IBV_EXP_QP_BURST_SIGNALED;
src/perftest_resources.c:					ctx->exp_wr[i*user_param->post_list + j].exp_send_flags = IBV_EXP_SEND_SIGNALED;
src/perftest_resources.c:				ctx->exp_wr[i*user_param->post_list + j].exp_send_flags = 0;
src/perftest_resources.c:			if (user_param->verb == ATOMIC) {
src/perftest_resources.c:				ctx->exp_wr[i*user_param->post_list + j].exp_opcode = exp_opcode_atomic_array[user_param->atomicType];
src/perftest_resources.c:				ctx->exp_wr[i*user_param->post_list + j].exp_opcode = exp_opcode_verbs_array[user_param->verb];
src/perftest_resources.c:			if (user_param->verb == WRITE || user_param->verb == READ) {
src/perftest_resources.c:				ctx->exp_wr[i*user_param->post_list + j].wr.rdma.rkey = rem_dest[xrc_offset + i].rkey;
src/perftest_resources.c:					ctx->exp_wr[i*user_param->post_list + j].wr.rdma.remote_addr = ctx->exp_wr[i*user_param->post_list + (j-1)].wr.rdma.remote_addr;
src/perftest_resources.c:					if ((user_param->tst == BW || user_param->tst == LAT_BY_BW) && user_param->size <= (ctx->cycle_buffer / 2))
src/perftest_resources.c:						increase_exp_rem_addr(&ctx->exp_wr[i*user_param->post_list + j],user_param->size,
src/perftest_resources.c:			} else if (user_param->verb == ATOMIC) {
src/perftest_resources.c:				ctx->exp_wr[i*user_param->post_list + j].wr.atomic.rkey = rem_dest[xrc_offset + i].rkey;
src/perftest_resources.c:					ctx->exp_wr[i*user_param->post_list + j].wr.atomic.remote_addr = ctx->exp_wr[i*user_param->post_list + j-1].wr.atomic.remote_addr;
src/perftest_resources.c:					if (user_param->tst == BW || user_param->tst == LAT_BY_BW)
src/perftest_resources.c:						increase_exp_rem_addr(&ctx->exp_wr[i*user_param->post_list + j],user_param->size,
src/perftest_resources.c:				if (user_param->atomicType == FETCH_AND_ADD)
src/perftest_resources.c:					ctx->exp_wr[i*user_param->post_list + j].wr.atomic.compare_add = ATOMIC_ADD_VALUE;
src/perftest_resources.c:					ctx->exp_wr[i*user_param->post_list + j].wr.atomic.swap = ATOMIC_SWAP_VALUE;
src/perftest_resources.c:			} else if (user_param->verb == SEND) {
src/perftest_resources.c:				if (user_param->connection_type == UD) {
src/perftest_resources.c:					ctx->exp_wr[i*user_param->post_list + j].wr.ud.ah = ctx->ah[i];
src/perftest_resources.c:					if (user_param->work_rdma_cm) {
src/perftest_resources.c:					ctx->exp_wr[i*user_param->post_list + j].wr.ud.remote_qkey = remote_qkey;
src/perftest_resources.c:					ctx->exp_wr[i*user_param->post_list + j].wr.ud.remote_qpn = remote_qpn;
src/perftest_resources.c:				} else if (user_param->connection_type == DC) {
src/perftest_resources.c:					ctx->exp_wr[i*user_param->post_list + j].dc.ah = ctx->ah[i];
src/perftest_resources.c:					ctx->exp_wr[i*user_param->post_list + j].dc.dct_access_key = user_param->dct_key;
src/perftest_resources.c:					ctx->exp_wr[i*user_param->post_list + j].dc.dct_number = rem_dest[xrc_offset + i].qpn;
src/perftest_resources.c:			if (user_param->connection_type == DC) {
src/perftest_resources.c:				ctx->exp_wr[i*user_param->post_list + j].dc.ah = ctx->ah[i];
src/perftest_resources.c:				ctx->exp_wr[i*user_param->post_list + j].dc.dct_access_key = user_param->dct_key;
src/perftest_resources.c:				ctx->exp_wr[i*user_param->post_list + j].dc.dct_number = rem_dest[xrc_offset + i].qpn;
src/perftest_resources.c:			if ((user_param->verb == SEND || user_param->verb == WRITE) && user_param->size <= user_param->inline_size)
src/perftest_resources.c:				ctx->exp_wr[i*user_param->post_list + j].exp_send_flags |= IBV_EXP_SEND_INLINE;
src/perftest_resources.c:			if (user_param->use_xrc)
src/perftest_resources.c:				ctx->exp_wr[i*user_param->post_list + j].qp_type.xrc.remote_srqn = rem_dest[xrc_offset + i].srqn;
src/perftest_resources.c:	int use_inl = user_param->size <= user_param->inline_size;
src/perftest_resources.c:	switch (user_param->connection_type) {
src/perftest_resources.c:		switch (user_param->verb) {
src/perftest_resources.c:				if (user_param->atomicType == FETCH_AND_ADD) {
src/perftest_resources.c:		switch (user_param->verb) {
src/perftest_resources.c:		switch (user_param->verb) {
src/perftest_resources.c:		switch (user_param->verb) {
src/perftest_resources.c:				if (user_param->atomicType == FETCH_AND_ADD) {
src/perftest_resources.c:	int num_of_qps = user_param->num_of_qps;
src/perftest_resources.c:	if((user_param->use_xrc || user_param->connection_type == DC) && (user_param->duplex || user_param->tst == LAT)) {
src/perftest_resources.c:		memset(&ctx->wr[i*user_param->post_list],0,sizeof(struct ibv_send_wr));
src/perftest_resources.c:		ctx->sge_list[i*user_param->post_list].addr = (uintptr_t)ctx->buf[i];
src/perftest_resources.c:		if (user_param->mac_fwd) {
src/perftest_resources.c:			if (user_param->mr_per_qp) {
src/perftest_resources.c:				ctx->sge_list[i*user_param->post_list].addr =
src/perftest_resources.c:				ctx->sge_list[i*user_param->post_list].addr = (uintptr_t)ctx->buf[i];
src/perftest_resources.c:		if (user_param->verb == WRITE || user_param->verb == READ)
src/perftest_resources.c:			ctx->wr[i*user_param->post_list].wr.rdma.remote_addr   = rem_dest[xrc_offset + i].vaddr;
src/perftest_resources.c:		else if (user_param->verb == ATOMIC)
src/perftest_resources.c:			ctx->wr[i*user_param->post_list].wr.atomic.remote_addr = rem_dest[xrc_offset + i].vaddr;
src/perftest_resources.c:		if (user_param->tst == BW || user_param->tst == LAT_BY_BW) {
src/perftest_resources.c:			if (user_param->verb != SEND)
src/perftest_resources.c:		for (j = 0; j < user_param->post_list; j++) {
src/perftest_resources.c:			ctx->sge_list[i*user_param->post_list + j].length =
src/perftest_resources.c:				(user_param->connection_type == RawEth) ? (user_param->size - HW_CRC_ADDITION) : user_param->size;
src/perftest_resources.c:			ctx->sge_list[i*user_param->post_list + j].lkey = ctx->mr[i]->lkey;
src/perftest_resources.c:				ctx->sge_list[i*user_param->post_list +j].addr = ctx->sge_list[i*user_param->post_list + (j-1)].addr;
src/perftest_resources.c:				if ((user_param->tst == BW || user_param->tst == LAT_BY_BW) && user_param->size <= (ctx->cycle_buffer / 2))
src/perftest_resources.c:					increase_loc_addr(&ctx->sge_list[i*user_param->post_list +j],user_param->size,
src/perftest_resources.c:			ctx->wr[i*user_param->post_list + j].sg_list = &ctx->sge_list[i*user_param->post_list + j];
src/perftest_resources.c:			ctx->wr[i*user_param->post_list + j].num_sge = MAX_SEND_SGE;
src/perftest_resources.c:			ctx->wr[i*user_param->post_list + j].wr_id   = i;
src/perftest_resources.c:			if (j == (user_param->post_list - 1)) {
src/perftest_resources.c:				ctx->wr[i*user_param->post_list + j].next = NULL;
src/perftest_resources.c:				ctx->wr[i*user_param->post_list + j].next = &ctx->wr[i*user_param->post_list+j+1];
src/perftest_resources.c:			if ((j + 1) % user_param->cq_mod == 0) {
src/perftest_resources.c:				ctx->wr[i*user_param->post_list + j].send_flags = IBV_SEND_SIGNALED;
src/perftest_resources.c:				ctx->wr[i*user_param->post_list + j].send_flags = 0;
src/perftest_resources.c:			if (user_param->verb == ATOMIC) {
src/perftest_resources.c:				ctx->wr[i*user_param->post_list + j].opcode = opcode_atomic_array[user_param->atomicType];
src/perftest_resources.c:				ctx->wr[i*user_param->post_list + j].opcode = opcode_verbs_array[user_param->verb];
src/perftest_resources.c:			if (user_param->verb == WRITE || user_param->verb == READ) {
src/perftest_resources.c:				ctx->wr[i*user_param->post_list + j].wr.rdma.rkey = rem_dest[xrc_offset + i].rkey;
src/perftest_resources.c:					ctx->wr[i*user_param->post_list + j].wr.rdma.remote_addr =
src/perftest_resources.c:						ctx->wr[i*user_param->post_list + (j-1)].wr.rdma.remote_addr;
src/perftest_resources.c:					if ((user_param->tst == BW || user_param->tst == LAT_BY_BW ) && user_param->size <= (ctx->cycle_buffer / 2))
src/perftest_resources.c:						increase_rem_addr(&ctx->wr[i*user_param->post_list + j],user_param->size,
src/perftest_resources.c:			} else if (user_param->verb == ATOMIC) {
src/perftest_resources.c:				ctx->wr[i*user_param->post_list + j].wr.atomic.rkey = rem_dest[xrc_offset + i].rkey;
src/perftest_resources.c:					ctx->wr[i*user_param->post_list + j].wr.atomic.remote_addr =
src/perftest_resources.c:						ctx->wr[i*user_param->post_list + j-1].wr.atomic.remote_addr;
src/perftest_resources.c:					if (user_param->tst == BW || user_param->tst == LAT_BY_BW)
src/perftest_resources.c:						increase_rem_addr(&ctx->wr[i*user_param->post_list + j],user_param->size,
src/perftest_resources.c:				if (user_param->atomicType == FETCH_AND_ADD)
src/perftest_resources.c:					ctx->wr[i*user_param->post_list + j].wr.atomic.compare_add = ATOMIC_ADD_VALUE;
src/perftest_resources.c:					ctx->wr[i*user_param->post_list + j].wr.atomic.swap = ATOMIC_SWAP_VALUE;
src/perftest_resources.c:			} else if (user_param->verb == SEND) {
src/perftest_resources.c:				if (user_param->connection_type == UD) {
src/perftest_resources.c:					ctx->wr[i*user_param->post_list + j].wr.ud.ah = ctx->ah[i]; 
src/perftest_resources.c:          if (user_param->work_rdma_cm) {
src/perftest_resources.c:					ctx->wr[i*user_param->post_list + j].wr.ud.remote_qkey = remote_qkey;
src/perftest_resources.c:					ctx->wr[i*user_param->post_list + j].wr.ud.remote_qpn = remote_qpn;
src/perftest_resources.c:			if ((user_param->verb == SEND || user_param->verb == WRITE) && user_param->size <= user_param->inline_size)
src/perftest_resources.c:				ctx->wr[i*user_param->post_list + j].send_flags |= IBV_SEND_INLINE;
src/perftest_resources.c:			if (user_param->use_xrc)
src/perftest_resources.c:				ctx->wr[i*user_param->post_list + j].qp_type.xrc.remote_srqn = rem_dest[xrc_offset + i].srqn;
src/perftest_resources.c:	int			num_of_qps = user_param->num_of_qps;
src/perftest_resources.c:	int			size_per_qp = user_param->rx_depth;
src/perftest_resources.c:	if((user_param->use_xrc || user_param->connection_type == DC) &&
src/perftest_resources.c:				(user_param->duplex || user_param->tst == LAT)) {
src/perftest_resources.c:		i = user_param->num_of_qps / 2;
src/perftest_resources.c:	if (user_param->use_srq)
src/perftest_resources.c:		size_per_qp /= user_param->num_of_qps;
src/perftest_resources.c:	if (user_param->use_rss) {
src/perftest_resources.c:	for (k = 0; i < user_param->num_of_qps; i++,k++) {
src/perftest_resources.c:		if (!user_param->mr_per_qp) {
src/perftest_resources.c:		if (user_param->connection_type == UD){
src/perftest_resources.c:		ctx->recv_sge_list[i].length = SIZE(user_param->connection_type,user_param->size,1);
src/perftest_resources.c:			if (user_param->use_srq) {
src/perftest_resources.c:			if ((user_param->tst == BW || user_param->tst == LAT_BY_BW) && user_param->size <= (ctx->cycle_buffer / 2)) {
src/perftest_resources.c:						user_param->size,
src/perftest_resources.c:						user_param->connection_type,ctx->cache_line_size,ctx->cycle_buffer);
src/perftest_resources.c:	int buf_size = 2*user_param->num_of_qps*sizeof(uint32_t);
src/perftest_resources.c:	ALLOCATE(ctx->ctrl_buf,uint32_t,user_param->num_of_qps);
src/perftest_resources.c:	ctx->credit_buf = (uint32_t *)ctx->ctrl_buf + user_param->num_of_qps;
src/perftest_resources.c:	ctx->credit_cnt = user_param->rx_depth/3;
src/perftest_resources.c:	for (i = 0; i < user_param->num_of_qps; i++) {
src/perftest_resources.c:	ALLOCATE(ctx->ctrl_wr,struct ibv_send_wr,user_param->num_of_qps);
src/perftest_resources.c:	ALLOCATE(ctx->ctrl_sge_list,struct ibv_sge,user_param->num_of_qps);
src/perftest_resources.c:	for (i = 0; i < user_param->num_of_qps; i++) {
src/perftest_resources.c:	ALLOCATE(swc,struct ibv_wc,user_param->tx_depth);
src/perftest_resources.c:		sne = ibv_poll_cq(ctx->send_cq,user_param->tx_depth,swc);
src/perftest_resources.c:	int 			num_of_qps = user_param->num_of_qps;
src/perftest_resources.c:	if(user_param->duplex && (user_param->use_xrc || user_param->connection_type == DC))
src/perftest_resources.c:	warmupsession = (user_param->post_list == 1) ? user_param->tx_depth : user_param->post_list;
src/perftest_resources.c:	ALLOCATE(wc_for_cleaning,struct ibv_wc,user_param->tx_depth);
src/perftest_resources.c:	ne = ibv_poll_cq(ctx->send_cq,user_param->tx_depth,wc_for_cleaning);
src/perftest_resources.c:		for (warmindex = 0 ;warmindex < warmupsession ;warmindex += user_param->post_list) {
src/perftest_resources.c:			if (user_param->use_exp == 1)
src/perftest_resources.c:					&ctx->exp_wr[index*user_param->post_list], &bad_exp_wr);
src/perftest_resources.c:				err = (ctx->post_send_func_pointer)(ctx->qp[index],&ctx->wr[index*user_param->post_list],&bad_wr);
src/perftest_resources.c:			err = ibv_post_send(ctx->qp[index],&ctx->wr[index*user_param->post_list],&bad_wr);
src/perftest_resources.c:				warmindex -= user_param->post_list;
src/perftest_resources.c:	return ibv_post_send(ctx->qp[index], &ctx->wr[index*user_param->post_list], &bad_wr);
src/perftest_resources.c:	int 			num_of_qps = user_param->num_of_qps;
src/perftest_resources.c:	if (user_param->test_type == DURATION) {
src/perftest_resources.c:		if (user_param->margin > 0 )
src/perftest_resources.c:			alarm(user_param->margin);
src/perftest_resources.c:		user_param->iters = 0;
src/perftest_resources.c:	if (user_param->duplex && (user_param->use_xrc || user_param->connection_type == DC))
src/perftest_resources.c:	tot_iters = (uint64_t)user_param->iters*num_of_qps;
src/perftest_resources.c:	if (user_param->test_type == DURATION && user_param->state != START_STATE && user_param->margin > 0) {
src/perftest_resources.c:	if (user_param->test_type == ITERATIONS && user_param->noPeak == ON)
src/perftest_resources.c:		user_param->tposted[0] = get_cycles();
src/perftest_resources.c:	if (user_param->rate_limit_type == SW_RATE_LIMIT ) {
src/perftest_resources.c:		switch (user_param->rate_units) {
src/perftest_resources.c:				rate_limit_pps = ((double)(user_param->rate_limit) / user_param->size) * 1048576;
src/perftest_resources.c:				rate_limit_pps = ((double)(user_param->rate_limit) / (user_param->size * 8)) * 1000000000;
src/perftest_resources.c:				rate_limit_pps = user_param->rate_limit;
src/perftest_resources.c:		cpu_mhz = get_cpu_mhz(user_param->cpu_freq_f);
src/perftest_resources.c:		number_of_bursts = rate_limit_pps / user_param->burst_size;
src/perftest_resources.c:		(user_param->test_type == DURATION && user_param->state != END_STATE) ) {
src/perftest_resources.c:			if (user_param->rate_limit_type == SW_RATE_LIMIT && is_sending_burst == 0) {
src/perftest_resources.c:			while ((ctx->scnt[index] < user_param->iters || user_param->test_type == DURATION) &&
src/perftest_resources.c:					(ctx->scnt[index] - ctx->ccnt[index] + user_param->post_list) <= (user_param->tx_depth) &&
src/perftest_resources.c:					!((user_param->rate_limit_type == SW_RATE_LIMIT ) && is_sending_burst == 0)) {
src/perftest_resources.c:					uint32_t swindow = ctx->scnt[index] + user_param->post_list - ctx->credit_buf[index];
src/perftest_resources.c:					if (swindow >= user_param->rx_depth)
src/perftest_resources.c:				if (user_param->post_list == 1 && (ctx->scnt[index] % user_param->cq_mod == 0 && user_param->cq_mod > 1)
src/perftest_resources.c:					&& !(ctx->scnt[index] == (user_param->iters - 1) && user_param->test_type == ITERATIONS)) {
src/perftest_resources.c:					if (user_param->verb_type == ACCL_INTF)
src/perftest_resources.c:						if (user_param->use_exp == 1)
src/perftest_resources.c:				if (user_param->noPeak == OFF)
src/perftest_resources.c:					user_param->tposted[totscnt] = get_cycles();
src/perftest_resources.c:				if (user_param->test_type == DURATION && user_param->state == END_STATE)
src/perftest_resources.c:				if (user_param->verb_type == ACCL_INTF) {
src/perftest_resources.c:					for (pl_index = 0; pl_index < user_param->post_list; pl_index++) {
src/perftest_resources.c:						sg_l = ctx->exp_wr[index*user_param->post_list + pl_index].sg_list;
src/perftest_resources.c:											ctx->exp_wr[index*user_param->post_list + pl_index].exp_send_flags);
src/perftest_resources.c:					if (user_param->use_exp == 1) {
src/perftest_resources.c:						&ctx->exp_wr[index*user_param->post_list],&bad_exp_wr);
src/perftest_resources.c:							&ctx->wr[index*user_param->post_list],&bad_wr);
src/perftest_resources.c:				if (user_param->flows != DEF_FLOWS) {
src/perftest_resources.c:					if (++flows_burst_iter == user_param->flows_burst) {
src/perftest_resources.c:						if (++send_flows_index == user_param->flows)
src/perftest_resources.c:				if (user_param->post_list == 1 && user_param->size <= (ctx->cycle_buffer / 2)) {
src/perftest_resources.c:					if (user_param->use_exp == 1)
src/perftest_resources.c:						increase_loc_addr(ctx->exp_wr[index].sg_list,user_param->size,
src/perftest_resources.c:						increase_loc_addr(ctx->wr[index].sg_list,user_param->size, ctx->scnt[index],
src/perftest_resources.c:					if (user_param->verb != SEND) {
src/perftest_resources.c:						if (user_param->use_exp == 1)
src/perftest_resources.c:							increase_exp_rem_addr(&ctx->exp_wr[index], user_param->size,
src/perftest_resources.c:									ctx->scnt[index], ctx->rem_addr[index], user_param->verb,
src/perftest_resources.c:							increase_rem_addr(&ctx->wr[index], user_param->size,
src/perftest_resources.c:									ctx->scnt[index], ctx->rem_addr[index], user_param->verb,
src/perftest_resources.c:				ctx->scnt[index] += user_param->post_list;
src/perftest_resources.c:				totscnt += user_param->post_list;
src/perftest_resources.c:				if (user_param->post_list == 1 &&
src/perftest_resources.c:						(ctx->scnt[index]%user_param->cq_mod == user_param->cq_mod - 1 ||
src/perftest_resources.c:							(user_param->test_type == ITERATIONS && ctx->scnt[index] == user_param->iters - 1))) {
src/perftest_resources.c:					if (user_param->verb_type == ACCL_INTF)
src/perftest_resources.c:						if (user_param->use_exp == 1) {
src/perftest_resources.c:				if (user_param->rate_limit_type == SW_RATE_LIMIT) {
src/perftest_resources.c:					burst_iter += user_param->post_list;
src/perftest_resources.c:					if (burst_iter >= user_param->burst_size) {
src/perftest_resources.c:		if (totccnt < tot_iters || (user_param->test_type == DURATION &&  totccnt < totscnt)) {
src/perftest_resources.c:				if (user_param->use_event) {
src/perftest_resources.c:				if (user_param->verb_type == ACCL_INTF)
src/perftest_resources.c:						wc_id = (user_param->verb_type == ACCL_INTF) ?
src/perftest_resources.c:						if (user_param->verb_type != ACCL_INTF) {
src/perftest_resources.c:						ctx->ccnt[wc_id] += user_param->cq_mod;
src/perftest_resources.c:						totccnt += user_param->cq_mod;
src/perftest_resources.c:						if (user_param->noPeak == OFF) {
src/perftest_resources.c:								user_param->tcompleted[user_param->iters*num_of_qps - 1] = get_cycles();
src/perftest_resources.c:								user_param->tcompleted[totccnt-1] = get_cycles();
src/perftest_resources.c:						if (user_param->test_type==DURATION && user_param->state == SAMPLE_STATE) {
src/perftest_resources.c:							if (user_param->report_per_port) {
src/perftest_resources.c:								user_param->iters_per_port[user_param->port_by_qp[wc_id]] += user_param->cq_mod;
src/perftest_resources.c:							user_param->iters += user_param->cq_mod;
src/perftest_resources.c:	if (user_param->noPeak == ON && user_param->test_type == ITERATIONS)
src/perftest_resources.c:		user_param->tcompleted[0] = get_cycles();
src/perftest_resources.c:	if (user_param->test_type == DURATION) {
src/perftest_resources.c:		user_param->iters=0;
src/perftest_resources.c:		if (user_param->margin > 0)
src/perftest_resources.c:			alarm(user_param->margin);
src/perftest_resources.c:	} else if (user_param->tst == BW) {
src/perftest_resources.c:		user_param->tposted[0] = get_cycles();
src/perftest_resources.c:	int 			size_per_qp = (user_param->use_srq) ?
src/perftest_resources.c:					user_param->rx_depth/user_param->num_of_qps : user_param->rx_depth;
src/perftest_resources.c:	ALLOCATE(swc ,struct ibv_wc ,user_param->tx_depth);
src/perftest_resources.c:	ALLOCATE(rcnt_for_qp,uint64_t,user_param->num_of_qps);
src/perftest_resources.c:	memset(rcnt_for_qp,0,sizeof(uint64_t)*user_param->num_of_qps);
src/perftest_resources.c:	ALLOCATE(scredit_for_qp,long,user_param->num_of_qps);
src/perftest_resources.c:	memset(scredit_for_qp,0,sizeof(long)*user_param->num_of_qps);
src/perftest_resources.c:	if (user_param->use_rss)
src/perftest_resources.c:		tot_iters = (uint64_t)user_param->iters*(user_param->num_of_qps-1);
src/perftest_resources.c:		tot_iters = (uint64_t)user_param->iters*user_param->num_of_qps;
src/perftest_resources.c:	if (user_param->test_type == ITERATIONS) {
src/perftest_resources.c:		check_alive_data.is_events = user_param->use_event;
src/perftest_resources.c:	while (rcnt < tot_iters || (user_param->test_type == DURATION && user_param->state != END_STATE)) {
src/perftest_resources.c:		if (user_param->use_event) {
src/perftest_resources.c:			if (user_param->test_type == DURATION && user_param->state == END_STATE)
src/perftest_resources.c:			if (user_param->verb_type == ACCL_INTF)
src/perftest_resources.c:				if (user_param->connection_type == DC)
src/perftest_resources.c:					wc_id = (user_param->verb_type == ACCL_INTF) ?
src/perftest_resources.c:					if (user_param->verb_type != ACCL_INTF) {
src/perftest_resources.c:					if (user_param->test_type==DURATION && user_param->state == SAMPLE_STATE) {
src/perftest_resources.c:						if (user_param->report_per_port) {
src/perftest_resources.c:							user_param->iters_per_port[user_param->port_by_qp[wc_id]]++;
src/perftest_resources.c:						user_param->iters++;
src/perftest_resources.c:					if (user_param->test_type==DURATION || rcnt_for_qp[wc_id] + size_per_qp <= user_param->iters) {
src/perftest_resources.c:						if (user_param->verb_type == ACCL_INTF) {
src/perftest_resources.c:							if (user_param->use_srq) {
src/perftest_resources.c:							if (user_param->flows != DEF_FLOWS) {
src/perftest_resources.c:								if (++recv_flows_burst == user_param->flows_burst) {
src/perftest_resources.c:									if (++recv_flows_index == user_param->flows)
src/perftest_resources.c:						if (SIZE(user_param->connection_type,user_param->size,!(int)user_param->machine) <= (ctx->cycle_buffer / 2)) {
src/perftest_resources.c:									user_param->size,
src/perftest_resources.c:									user_param->connection_type,ctx->cache_line_size,ctx->cycle_buffer);
src/perftest_resources.c:						int credit_cnt = rcnt_for_qp[wc_id]%user_param->rx_depth;
src/perftest_resources.c:							while (scredit_for_qp[wc_id] == user_param->tx_depth) {
src/perftest_resources.c:								sne = ibv_poll_cq(ctx->send_cq,user_param->tx_depth,swc);
src/perftest_resources.c:				user_param->check_alive_exited = 1;
src/perftest_resources.c:	if (user_param->test_type == ITERATIONS)
src/perftest_resources.c:		user_param->tcompleted[0] = get_cycles();
src/perftest_resources.c:	int 			num_of_qps = user_param->num_of_qps;
src/perftest_resources.c:	ALLOCATE(scnt_for_qp,uint64_t,user_param->num_of_qps);
src/perftest_resources.c:	memset(scnt_for_qp,0,sizeof(uint64_t)*user_param->num_of_qps);
src/perftest_resources.c:	alarm(user_param->duration);
src/perftest_resources.c:	user_param->iters = 0;
src/perftest_resources.c:	if (user_param->duplex && (user_param->use_xrc || user_param->connection_type == DC))
src/perftest_resources.c:	user_param->tposted[0] = get_cycles();
src/perftest_resources.c:			while ((ctx->scnt[index] - ctx->ccnt[index] + user_param->post_list) <= user_param->tx_depth) {
src/perftest_resources.c:					uint32_t swindow = scnt_for_qp[index] + user_param->post_list - ctx->credit_buf[index];
src/perftest_resources.c:					if (swindow >= user_param->rx_depth)
src/perftest_resources.c:				if (user_param->post_list == 1 && (ctx->scnt[index] % user_param->cq_mod == 0 && user_param->cq_mod > 1)) {
src/perftest_resources.c:					if (user_param->verb_type == ACCL_INTF)
src/perftest_resources.c:						if (user_param->use_exp == 1)
src/perftest_resources.c:				if (user_param->use_exp == 1)
src/perftest_resources.c:					err = (ctx->exp_post_send_func_pointer)(ctx->qp[index],&ctx->exp_wr[index*user_param->post_list],&bad_exp_wr);
src/perftest_resources.c:					err = (ctx->post_send_func_pointer)(ctx->qp[index],&ctx->wr[index*user_param->post_list],&bad_wr);
src/perftest_resources.c:				ctx->scnt[index] += user_param->post_list;
src/perftest_resources.c:				scnt_for_qp[index] += user_param->post_list;
src/perftest_resources.c:				totscnt += user_param->post_list;
src/perftest_resources.c:				if (user_param->post_list == 1 &&
src/perftest_resources.c:						(ctx->scnt[index]%user_param->cq_mod == user_param->cq_mod - 1 ||
src/perftest_resources.c:							(user_param->test_type == ITERATIONS && ctx->scnt[index] == user_param->iters - 1))) {
src/perftest_resources.c:					if (user_param->verb_type == ACCL_INTF)
src/perftest_resources.c:						if (user_param->use_exp == 1)
src/perftest_resources.c:					wc_id = (user_param->verb_type == ACCL_INTF) ?
src/perftest_resources.c:					user_param->iters += user_param->cq_mod;
src/perftest_resources.c:					totccnt += user_param->cq_mod;
src/perftest_resources.c:					ctx->ccnt[wc_id] += user_param->cq_mod;
src/perftest_resources.c:	ALLOCATE(swc ,struct ibv_wc ,user_param->tx_depth);
src/perftest_resources.c:	ALLOCATE(rcnt_for_qp,uint64_t,user_param->num_of_qps);
src/perftest_resources.c:	memset(rcnt_for_qp,0,sizeof(uint64_t)*user_param->num_of_qps);
src/perftest_resources.c:	ALLOCATE(ccnt_for_qp,uint64_t,user_param->num_of_qps);
src/perftest_resources.c:	memset(ccnt_for_qp,0,sizeof(uint64_t)*user_param->num_of_qps);
src/perftest_resources.c:	ALLOCATE(scredit_for_qp,int,user_param->num_of_qps);
src/perftest_resources.c:	memset(scredit_for_qp,0,sizeof(int)*user_param->num_of_qps);
src/perftest_resources.c:				if (user_param->use_srq) {
src/perftest_resources.c:							while (ccnt_for_qp[wc[i].wr_id] == user_param->tx_depth) {
src/perftest_resources.c:								sne = ibv_poll_cq(ctx->send_cq,user_param->tx_depth,swc);
src/perftest_resources.c:	int 			num_of_qps = user_param->num_of_qps;
src/perftest_resources.c:	int 			size_per_qp = (user_param->use_srq) ? user_param->rx_depth/user_param->num_of_qps : user_param->rx_depth;
src/perftest_resources.c:	ALLOCATE(rcnt_for_qp,uint64_t,user_param->num_of_qps);
src/perftest_resources.c:	ALLOCATE(scredit_for_qp,int,user_param->num_of_qps);
src/perftest_resources.c:	ALLOCATE(wc,struct ibv_wc,user_param->rx_depth);
src/perftest_resources.c:	memset(rcnt_for_qp,0,sizeof(uint64_t)*user_param->num_of_qps);
src/perftest_resources.c:	memset(scredit_for_qp,0,sizeof(int)*user_param->num_of_qps);
src/perftest_resources.c:	if (user_param->noPeak == ON)
src/perftest_resources.c:		user_param->tposted[0] = get_cycles();
src/perftest_resources.c:	if (user_param->machine == CLIENT) {
src/perftest_resources.c:		if (user_param->test_type == DURATION) {
src/perftest_resources.c:			user_param->iters=0;
src/perftest_resources.c:			if (user_param->margin > 0 )
src/perftest_resources.c:				alarm(user_param->margin);
src/perftest_resources.c:	if (user_param->test_type == ITERATIONS) {
src/perftest_resources.c:		check_alive_data.is_events = user_param->use_event;
src/perftest_resources.c:	if(user_param->duplex && (user_param->use_xrc || user_param->connection_type == DC))
src/perftest_resources.c:	tot_iters = (uint64_t)user_param->iters*num_of_qps;
src/perftest_resources.c:	iters=user_param->iters;
src/perftest_resources.c:	while ((user_param->test_type == DURATION && user_param->state != END_STATE) ||
src/perftest_resources.c:			while (before_first_rx == OFF && (ctx->scnt[index] < iters || user_param->test_type == DURATION) &&
src/perftest_resources.c:					((ctx->scnt[index] + scredit_for_qp[index] - ctx->ccnt[index]) < user_param->tx_depth)) {
src/perftest_resources.c:					uint32_t swindow = ctx->scnt[index] + user_param->post_list - ctx->credit_buf[index];
src/perftest_resources.c:					if (swindow >= user_param->rx_depth)
src/perftest_resources.c:				if (user_param->post_list == 1 && (ctx->scnt[index] % user_param->cq_mod == 0 && user_param->cq_mod > 1)
src/perftest_resources.c:					&& !(ctx->scnt[index] == (user_param->iters - 1) && user_param->test_type == ITERATIONS)) {
src/perftest_resources.c:					if (user_param->use_exp ==1)
src/perftest_resources.c:				if (user_param->noPeak == OFF)
src/perftest_resources.c:					user_param->tposted[totscnt] = get_cycles();
src/perftest_resources.c:				if (user_param->test_type == DURATION && duration_param->state == END_STATE)
src/perftest_resources.c:				if (user_param->use_exp == 1)
src/perftest_resources.c:						&ctx->exp_wr[index*user_param->post_list],&bad_exp_wr);
src/perftest_resources.c:						&ctx->wr[index*user_param->post_list],&bad_wr);
src/perftest_resources.c:				if (user_param->post_list == 1 && user_param->size <= (ctx->cycle_buffer / 2)) {
src/perftest_resources.c:					if (user_param->use_exp == 1)
src/perftest_resources.c:						increase_loc_addr(ctx->exp_wr[index].sg_list,user_param->size,ctx->scnt[index],
src/perftest_resources.c:						increase_loc_addr(ctx->wr[index].sg_list,user_param->size,ctx->scnt[index],
src/perftest_resources.c:				ctx->scnt[index] += user_param->post_list;
src/perftest_resources.c:				totscnt += user_param->post_list;
src/perftest_resources.c:				if (user_param->post_list == 1 &&
src/perftest_resources.c:					(ctx->scnt[index]%user_param->cq_mod == user_param->cq_mod - 1 ||
src/perftest_resources.c:						(user_param->test_type == ITERATIONS && ctx->scnt[index] == iters-1))) {
src/perftest_resources.c:					if (user_param->use_exp == 1)
src/perftest_resources.c:		if (user_param->use_event) {
src/perftest_resources.c:		ne = ibv_poll_cq(ctx->recv_cq,user_param->rx_depth,wc);
src/perftest_resources.c:			if (user_param->machine == SERVER && before_first_rx == ON) {
src/perftest_resources.c:				if (user_param->test_type == DURATION) {
src/perftest_resources.c:					user_param->iters=0;
src/perftest_resources.c:					if (user_param->margin > 0 )
src/perftest_resources.c:						alarm(user_param->margin);
src/perftest_resources.c:				if (user_param->test_type==DURATION && user_param->state == SAMPLE_STATE) {
src/perftest_resources.c:					if (user_param->report_per_port) {
src/perftest_resources.c:						user_param->iters_per_port[user_param->port_by_qp[(int)wc[i].wr_id]]++;
src/perftest_resources.c:					user_param->iters++;
src/perftest_resources.c:				if (user_param->test_type==DURATION || rcnt_for_qp[wc[i].wr_id] + size_per_qp <= user_param->iters) {
src/perftest_resources.c:					if (user_param->use_srq) {
src/perftest_resources.c:					if (SIZE(user_param->connection_type,user_param->size,!(int)user_param->machine) <= (ctx->cycle_buffer / 2)) {
src/perftest_resources.c:								user_param->size,
src/perftest_resources.c:								ctx->rx_buffer_addr[wc[i].wr_id],user_param->connection_type,
src/perftest_resources.c:					int credit_cnt = rcnt_for_qp[wc[i].wr_id]%user_param->rx_depth;
src/perftest_resources.c:						while ((ctx->scnt[wc[i].wr_id] + scredit_for_qp[wc[i].wr_id] - ctx->ccnt[wc[i].wr_id]) >= user_param->tx_depth) {
src/perftest_resources.c:									totccnt += user_param->cq_mod;
src/perftest_resources.c:									ctx->ccnt[(int)credit_wc.wr_id] += user_param->cq_mod;
src/perftest_resources.c:									if (user_param->noPeak == OFF) {
src/perftest_resources.c:										if ((user_param->test_type == ITERATIONS && (totccnt >= tot_iters - 1)))
src/perftest_resources.c:											user_param->tcompleted[tot_iters - 1] = get_cycles();
src/perftest_resources.c:											user_param->tcompleted[totccnt-1] = get_cycles();
src/perftest_resources.c:									if (user_param->test_type==DURATION && user_param->state == SAMPLE_STATE)
src/perftest_resources.c:										user_param->iters += user_param->cq_mod;
src/perftest_resources.c:				user_param->check_alive_exited = 1;
src/perftest_resources.c:					totccnt += user_param->cq_mod;
src/perftest_resources.c:					ctx->ccnt[(int)wc_tx[i].wr_id] += user_param->cq_mod;
src/perftest_resources.c:					if (user_param->noPeak == OFF) {
src/perftest_resources.c:						if ((user_param->test_type == ITERATIONS && (totccnt >= tot_iters - 1)))
src/perftest_resources.c:							user_param->tcompleted[tot_iters - 1] = get_cycles();
src/perftest_resources.c:							user_param->tcompleted[totccnt-1] = get_cycles();
src/perftest_resources.c:					if (user_param->test_type==DURATION && user_param->state == SAMPLE_STATE) {
src/perftest_resources.c:						if (user_param->report_per_port) {
src/perftest_resources.c:							user_param->iters_per_port[user_param->port_by_qp[(int)wc[i].wr_id]] += user_param->cq_mod;
src/perftest_resources.c:						user_param->iters += user_param->cq_mod;
src/perftest_resources.c:	if (user_param->noPeak == ON && user_param->test_type == ITERATIONS) {
src/perftest_resources.c:		user_param->tcompleted[0] = get_cycles();
src/perftest_resources.c:	int 			cpu_mhz = get_cpu_mhz(user_param->cpu_freq_f);
src/perftest_resources.c:	int 			total_gap_cycles = user_param->latency_gap * cpu_mhz;
src/perftest_resources.c:	if (user_param->use_exp == 1) {
src/perftest_resources.c:		ctx->exp_wr[0].sg_list->length = user_param->size;
src/perftest_resources.c:		if (user_param->size <= user_param->inline_size)
src/perftest_resources.c:		ctx->wr[0].sg_list->length = user_param->size;
src/perftest_resources.c:		if (user_param->size <= user_param->inline_size)
src/perftest_resources.c:	if((user_param->use_xrc || user_param->connection_type == DC))
src/perftest_resources.c:	post_buf = (char*)ctx->buf[0] + user_param->size - 1;
src/perftest_resources.c:	poll_buf = (char*)ctx->buf[0] + (user_param->num_of_qps + poll_buf_offset)*BUFF_SIZE(ctx->size, ctx->cycle_buffer) + user_param->size - 1;
src/perftest_resources.c:	if (user_param->test_type == DURATION) {
src/perftest_resources.c:		user_param->iters = 0;
src/perftest_resources.c:		if (user_param->margin > 0)
src/perftest_resources.c:			alarm(user_param->margin);
src/perftest_resources.c:	while (scnt < user_param->iters || ccnt < user_param->iters || rcnt < user_param->iters
src/perftest_resources.c:			|| ((user_param->test_type == DURATION && user_param->state != END_STATE))) {
src/perftest_resources.c:		if ((rcnt < user_param->iters || user_param->test_type == DURATION) && !(scnt < 1 && user_param->machine == SERVER)) {
src/perftest_resources.c:			while (*poll_buf != (char)rcnt && user_param->state != END_STATE);
src/perftest_resources.c:		if (scnt < user_param->iters || user_param->test_type == DURATION) {
src/perftest_resources.c:			if (user_param->latency_gap) {
src/perftest_resources.c:			if (user_param->test_type == ITERATIONS)
src/perftest_resources.c:				user_param->tposted[scnt] = get_cycles();
src/perftest_resources.c:			if (user_param->use_exp == 1)
src/perftest_resources.c:		if (user_param->test_type == DURATION && user_param->state == END_STATE)
src/perftest_resources.c:		if (ccnt < user_param->iters || user_param->test_type == DURATION) {
src/perftest_resources.c:				if (user_param->test_type==DURATION && user_param->state == SAMPLE_STATE)
src/perftest_resources.c:					user_param->iters++;
src/perftest_resources.c:	int 		cpu_mhz = get_cpu_mhz(user_param->cpu_freq_f);
src/perftest_resources.c:	int 		total_gap_cycles = user_param->latency_gap * cpu_mhz;
src/perftest_resources.c:	if (user_param->use_exp == 1) {
src/perftest_resources.c:		ctx->exp_wr[0].sg_list->length = user_param->size;
src/perftest_resources.c:		ctx->wr[0].sg_list->length = user_param->size;
src/perftest_resources.c:	if (user_param->test_type == DURATION) {
src/perftest_resources.c:		user_param->iters = 0;
src/perftest_resources.c:		if (user_param->margin > 0)
src/perftest_resources.c:			alarm(user_param->margin);
src/perftest_resources.c:	while (scnt < user_param->iters || (user_param->test_type == DURATION && user_param->state != END_STATE)) {
src/perftest_resources.c:		if (user_param->latency_gap) {
src/perftest_resources.c:		if (user_param->test_type == ITERATIONS)
src/perftest_resources.c:			user_param->tposted[scnt++] = get_cycles();
src/perftest_resources.c:		if (user_param->use_exp == 1)
src/perftest_resources.c:		if (user_param->test_type == DURATION && user_param->state == END_STATE)
src/perftest_resources.c:		if (user_param->use_event) {
src/perftest_resources.c:				if (user_param->test_type==DURATION && user_param->state == SAMPLE_STATE)
src/perftest_resources.c:					user_param->iters++;
src/perftest_resources.c:		} while (!user_param->use_event && ne == 0);
src/perftest_resources.c:	int 			size_per_qp = (user_param->use_srq) ?
src/perftest_resources.c:					user_param->rx_depth/user_param->num_of_qps : user_param->rx_depth;
src/perftest_resources.c:	int 			cpu_mhz = get_cpu_mhz(user_param->cpu_freq_f);
src/perftest_resources.c:	int			total_gap_cycles = user_param->latency_gap * cpu_mhz;
src/perftest_resources.c:	if (user_param->connection_type != RawEth) {
src/perftest_resources.c:		if (user_param->use_exp == 1) {
src/perftest_resources.c:			ctx->exp_wr[0].sg_list->length = user_param->size;
src/perftest_resources.c:			ctx->wr[0].sg_list->length = user_param->size;
src/perftest_resources.c:	if (user_param->size <= user_param->inline_size) {
src/perftest_resources.c:		if (user_param->use_exp == 1)
src/perftest_resources.c:	while (scnt < user_param->iters || rcnt < user_param->iters ||
src/perftest_resources.c:			( (user_param->test_type == DURATION && user_param->state != END_STATE))) {
src/perftest_resources.c:		if ((rcnt < user_param->iters || user_param->test_type == DURATION) && !(scnt < 1 && user_param->machine == CLIENT)) {
src/perftest_resources.c:			if (user_param->use_event) {
src/perftest_resources.c:				if (user_param->test_type == DURATION && user_param->state == END_STATE)
src/perftest_resources.c:					if (user_param->test_type == DURATION && user_param->state == SAMPLE_STATE)
src/perftest_resources.c:						user_param->iters++;
src/perftest_resources.c:					if (user_param->test_type == DURATION || (rcnt + size_per_qp <= user_param->iters)) {
src/perftest_resources.c:						if (user_param->use_srq) {
src/perftest_resources.c:						if (user_param->flows != DEF_FLOWS) {
src/perftest_resources.c:							if (++recv_flows_index == user_param->flows) {
src/perftest_resources.c:								ctx->recv_sge_list[0].addr += INC(user_param->size, ctx->cache_line_size);
src/perftest_resources.c:			} while (!user_param->use_event && ne == 0);
src/perftest_resources.c:		if (scnt < user_param->iters || (user_param->test_type == DURATION && user_param->state != END_STATE)) {
src/perftest_resources.c:			if (user_param->latency_gap) {
src/perftest_resources.c:			if (user_param->test_type == ITERATIONS)
src/perftest_resources.c:				user_param->tposted[scnt] = get_cycles();
src/perftest_resources.c:			if (scnt % user_param->cq_mod == 0 || (user_param->test_type == ITERATIONS && scnt == user_param->iters)) {
src/perftest_resources.c:				if (user_param->use_exp == 1)
src/perftest_resources.c:			if (user_param->test_type == DURATION && user_param->state == END_STATE)
src/perftest_resources.c:			if (user_param->use_exp == 1)
src/perftest_resources.c:			if (user_param->flows != DEF_FLOWS) {
src/perftest_resources.c:				if (++send_flows_index == user_param->flows) {
src/perftest_resources.c:				if (user_param->use_event) {
src/perftest_resources.c:				} while (!user_param->use_event && s_ne == 0);
src/perftest_resources.c:				if (user_param->use_exp == 1)
src/perftest_resources.c:	ALLOCATE(wc, struct ibv_wc, user_param->burst_size);
src/perftest_resources.c:	while (rcnt < user_param->iters) {
src/perftest_resources.c:		ne = ibv_poll_cq(ctx->recv_cq, user_param->burst_size, wc);
src/perftest_resources.c:				if (rcnt%user_param->reply_every == 0 && scnt - ccnt < user_param->tx_depth) {
src/perftest_resources.c:	ALLOCATE(wc, struct ibv_wc, user_param->burst_size);
src/perftest_resources.c:	tot_iters = (uint64_t)user_param->iters;
src/perftest_resources.c:	cpu_mhz = get_cpu_mhz(user_param->cpu_freq_f);
src/perftest_resources.c:	if (user_param->rate_limit > 0 ) {
src/perftest_resources.c:		if (user_param->rate_limit_type == SW_RATE_LIMIT) {
src/perftest_resources.c:			switch (user_param->rate_units) {
src/perftest_resources.c:					rate_limit_pps = ((double)(user_param->rate_limit) / user_param->size) * 1048576;
src/perftest_resources.c:					rate_limit_pps = ((double)(user_param->rate_limit) / (user_param->size * 8)) * 1000000000;
src/perftest_resources.c:					rate_limit_pps = user_param->rate_limit;
src/perftest_resources.c:			number_of_bursts = rate_limit_pps / user_param->burst_size;
src/perftest_resources.c:	while (totrcnt < (totscnt / user_param->reply_every) || totccnt < tot_iters) {
src/perftest_resources.c:			if (gap_deadline > get_cycles() && user_param->rate_limit_type == SW_RATE_LIMIT) {
src/perftest_resources.c:		while ((totscnt < user_param->iters)
src/perftest_resources.c:			&& (totscnt - totccnt) < (user_param->tx_depth) && !(is_sending_burst == 0 )) {
src/perftest_resources.c:			if (user_param->use_exp == 1)
src/perftest_resources.c:			if (user_param->post_list == 1 && user_param->size <= (ctx->cycle_buffer / 2)) {
src/perftest_resources.c:				if (user_param->use_exp == 1)
src/perftest_resources.c:					increase_loc_addr(ctx->exp_wr[0].sg_list, user_param->size,
src/perftest_resources.c:					increase_loc_addr(ctx->wr[0].sg_list, user_param->size, totscnt,
src/perftest_resources.c:			totscnt += user_param->post_list;
src/perftest_resources.c:			if (totscnt % user_param->reply_every == 0 && totscnt != 0) {
src/perftest_resources.c:				user_param->tposted[pong_cnt] = get_cycles();
src/perftest_resources.c:			if (++burst_iter == user_param->burst_size) {
src/perftest_resources.c:					wc_id = (user_param->verb_type == ACCL_INTF) ?
src/perftest_resources.c:					user_param->tcompleted[totrcnt] = get_cycles();
src/perftest_resources.c:			ns = ibv_poll_cq(ctx->send_cq, user_param->burst_size, wc);
src/perftest_resources.c:					wc_id = (user_param->verb_type == ACCL_INTF) ?
src/perftest_resources.c:					totccnt += user_param->cq_mod;
src/perftest_resources.c:	ALLOCATE(my_dest_info, struct raw_ethernet_info, user_param->num_of_qps);
src/perftest_resources.c:	memset(my_dest_info, 0, sizeof(struct raw_ethernet_info) * user_param->num_of_qps);
src/perftest_resources.c:	ALLOCATE(rem_dest_info, struct raw_ethernet_info, user_param->num_of_qps);
src/perftest_resources.c:	memset(rem_dest_info, 0, sizeof(struct raw_ethernet_info) * user_param->num_of_qps);
src/perftest_resources.c:	if (user_param->test_type == ITERATIONS) {
src/perftest_resources.c:		user_param->flows = user_param->iters * user_param->num_of_qps;
src/perftest_resources.c:		allocated_flows = user_param->iters;
src/perftest_resources.c:	} else if (user_param->test_type == DURATION) {
src/perftest_resources.c:		allocated_flows = (2 * MAX_FS_PORT) - (user_param->server_port + user_param->client_port);
src/perftest_resources.c:        ALLOCATE(flow_create_result, struct ibv_exp_flow*, allocated_flows * user_param->num_of_qps);
src/perftest_resources.c:        ALLOCATE(flow_rules, struct ibv_exp_flow_attr*, allocated_flows * user_param->num_of_qps);
src/perftest_resources.c:        ALLOCATE(flow_create_result, struct ibv_flow*, allocated_flows * user_param->num_of_qps);
src/perftest_resources.c:        ALLOCATE(flow_rules, struct ibv_flow_attr*, allocated_flows * user_param->num_of_qps);
src/perftest_resources.c:	if(user_param->test_type == DURATION) {
src/perftest_resources.c:		user_param->iters = 0;
src/perftest_resources.c:		alarm(user_param->margin);
src/perftest_resources.c:		if (user_param->margin > 0)
src/perftest_resources.c:			alarm(user_param->margin);
src/perftest_resources.c:		for (qp_index = 0; qp_index < user_param->num_of_qps; qp_index++) {
src/perftest_resources.c:				if (user_param->test_type == ITERATIONS)
src/perftest_resources.c:					user_param->tposted[tot_fs_cnt] = get_cycles();
src/perftest_resources.c:				else if (user_param->test_type == DURATION && duration_param->state == END_STATE)
src/perftest_resources.c:				if (user_param->test_type == ITERATIONS)
src/perftest_resources.c:					user_param->tcompleted[tot_fs_cnt] = get_cycles();
src/perftest_resources.c:				if (user_param->test_type == ITERATIONS ||
src/perftest_resources.c:				   (user_param->test_type == DURATION && duration_param->state == SAMPLE_STATE))
src/perftest_resources.c:	} while (user_param->test_type == DURATION && duration_param->state != END_STATE);
src/perftest_resources.c:	if (user_param->test_type == DURATION && user_param->state == END_STATE)
src/perftest_resources.c:		user_param->iters = tot_fs_cnt;
src/perftest_resources.c:	if (user_param->connection_type == UD
src/perftest_resources.c:		|| user_param->connection_type == RawEth)
src/perftest_resources.c:	ALLOCATE(ctx->cma_master.nodes, struct cma_node, user_param->num_of_qps);
src/perftest_resources.c:		(sizeof *ctx->cma_master.nodes) * user_param->num_of_qps);
src/perftest_resources.c:	for (i = 0; i < user_param->num_of_qps; i++) {
src/perftest_resources.c:		if (user_param->machine == CLIENT) {
src/perftest_resources.c:	for (i = 0; i < user_param->num_of_qps; i++) {
src/perftest_resources.c:	for (i = 0; i < user_param->num_of_qps; i++) {
src/raw_ethernet_send_lat.c:	/*set up the connection, return the required flow rules (notice that user_param->duplex == TRUE)
src/perftest_parameters.c:	user_param->port		= DEF_PORT;
src/perftest_parameters.c:	user_param->ib_port		= DEF_IB_PORT;
src/perftest_parameters.c:	user_param->ib_port2		= DEF_IB_PORT2;
src/perftest_parameters.c:	user_param->link_type		= LINK_UNSPEC;
src/perftest_parameters.c:	user_param->link_type2		= LINK_UNSPEC;
src/perftest_parameters.c:	user_param->size		= (user_param->tst == BW ) ? DEF_SIZE_BW : DEF_SIZE_LAT;
src/perftest_parameters.c:	user_param->tx_depth		= (user_param->tst == BW || user_param->tst == LAT_BY_BW ) ? DEF_TX_BW : DEF_TX_LAT;
src/perftest_parameters.c:	user_param->qp_timeout		= DEF_QP_TIME;
src/perftest_parameters.c:	user_param->test_method		= RUN_REGULAR;
src/perftest_parameters.c:	user_param->cpu_freq_f		= OFF;
src/perftest_parameters.c:	user_param->connection_type	= (user_param->connection_type == RawEth) ? RawEth : RC;
src/perftest_parameters.c:	user_param->use_event		= OFF;
src/perftest_parameters.c:	user_param->eq_num		= 0;
src/perftest_parameters.c:	user_param->use_eq_num		= OFF;
src/perftest_parameters.c:	user_param->num_of_qps		= DEF_NUM_QPS;
src/perftest_parameters.c:	user_param->gid_index		= DEF_GID_INDEX;
src/perftest_parameters.c:	user_param->gid_index2		= DEF_GID_INDEX;
src/perftest_parameters.c:	user_param->use_gid_user	= 0;
src/perftest_parameters.c:	user_param->inline_size		= DEF_INLINE;
src/perftest_parameters.c:	user_param->use_mcg		= OFF;
src/perftest_parameters.c:	user_param->use_rdma_cm		= OFF;
src/perftest_parameters.c:	user_param->work_rdma_cm	= OFF;
src/perftest_parameters.c:	user_param->rx_depth		= user_param->verb == SEND ? DEF_RX_SEND : DEF_RX_RDMA;
src/perftest_parameters.c:	user_param->duplex		= OFF;
src/perftest_parameters.c:	user_param->noPeak		= OFF;
src/perftest_parameters.c:	user_param->req_cq_mod		= 0;
src/perftest_parameters.c:	user_param->req_size 		= 0;
src/perftest_parameters.c:	user_param->cq_mod		= DEF_CQ_MOD;
src/perftest_parameters.c:	user_param->iters		= (user_param->tst == BW && user_param->verb == WRITE) ? DEF_ITERS_WB : DEF_ITERS;
src/perftest_parameters.c:	user_param->dualport		= OFF;
src/perftest_parameters.c:	user_param->post_list		= 1;
src/perftest_parameters.c:	user_param->use_srq		= OFF;
src/perftest_parameters.c:	user_param->use_xrc		= OFF;
src/perftest_parameters.c:	user_param->use_rss		= OFF;
src/perftest_parameters.c:	user_param->srq_exists		= OFF;
src/perftest_parameters.c:	user_param->duration		= DEF_DURATION;
src/perftest_parameters.c:	user_param->margin		= DEF_INIT_MARGIN;
src/perftest_parameters.c:	user_param->test_type		= ITERATIONS;
src/perftest_parameters.c:	user_param->state		= START_STATE;
src/perftest_parameters.c:	user_param->tos			= DEF_TOS;
src/perftest_parameters.c:	user_param->hop_limit		= DEF_HOP_LIMIT;
src/perftest_parameters.c:	user_param->mac_fwd		= OFF;
src/perftest_parameters.c:	user_param->report_fmt		= MBS;
src/perftest_parameters.c:	user_param->report_both		= OFF;
src/perftest_parameters.c:	user_param->is_reversed		= OFF;
src/perftest_parameters.c:	user_param->is_limit_bw		= OFF;
src/perftest_parameters.c:	user_param->limit_bw		= 0;
src/perftest_parameters.c:	user_param->is_limit_msgrate	= OFF;
src/perftest_parameters.c:	user_param->limit_msgrate	= 0;
src/perftest_parameters.c:	user_param->pkey_index		= 0;
src/perftest_parameters.c:	user_param->raw_qos		= 0;
src/perftest_parameters.c:	user_param->inline_recv_size	= 0;
src/perftest_parameters.c:	user_param->tcp			= 0;
src/perftest_parameters.c:	user_param->burst_size		= 0;
src/perftest_parameters.c:	user_param->typical_pkt_size	= 0;
src/perftest_parameters.c:	user_param->rate_limit		= 0;
src/perftest_parameters.c:	user_param->valid_hw_rate_limit_index = 0;
src/perftest_parameters.c:	user_param->rate_units		= GIGA_BIT_PS;
src/perftest_parameters.c:	user_param->rate_limit_type	= DISABLE_RATE_LIMIT;
src/perftest_parameters.c:	user_param->is_rate_limit_type  = 0;
src/perftest_parameters.c:	user_param->output		= -1;
src/perftest_parameters.c:	user_param->use_cuda		= 0;
src/perftest_parameters.c:	user_param->mmap_file		= NULL;
src/perftest_parameters.c:	user_param->mmap_offset		= 0;
src/perftest_parameters.c:	user_param->iters_per_port[0]	= 0;
src/perftest_parameters.c:	user_param->iters_per_port[1]	= 0;
src/perftest_parameters.c:	user_param->wait_destroy	= 0;
src/perftest_parameters.c:	user_param->is_old_raw_eth_param = 0;
src/perftest_parameters.c:	user_param->is_new_raw_eth_param = 0;
src/perftest_parameters.c:	user_param->reply_every		= 1;
src/perftest_parameters.c:	user_param->vlan_en             = OFF;
src/perftest_parameters.c:	user_param->vlan_pcp		= 1;
src/perftest_parameters.c:	user_param->print_eth_func 	= &print_ethernet_header;
src/perftest_parameters.c:	if (user_param->tst == LAT) {
src/perftest_parameters.c:		user_param->r_flag->unsorted	= OFF;
src/perftest_parameters.c:		user_param->r_flag->histogram	= OFF;
src/perftest_parameters.c:		user_param->r_flag->cycles	= OFF;
src/perftest_parameters.c:	if (user_param->tst == FS_RATE) {
src/perftest_parameters.c:		user_param->r_flag->cycles	= OFF;
src/perftest_parameters.c:	if (user_param->verb == ATOMIC) {
src/perftest_parameters.c:		user_param->atomicType	= FETCH_AND_ADD;
src/perftest_parameters.c:		user_param->size	= DEF_SIZE_ATOMIC;
src/perftest_parameters.c:	user_param->cpu_util			= 0;
src/perftest_parameters.c:	user_param->cpu_util_data.enable	= 0;
src/perftest_parameters.c:	user_param->retry_count			= DEF_RETRY_COUNT;
src/perftest_parameters.c:	user_param->dont_xchg_versions		= 0;
src/perftest_parameters.c:	user_param->use_exp			= 0;
src/perftest_parameters.c:	user_param->ipv6			= 0;
src/perftest_parameters.c:	user_param->report_per_port		= 0;
src/perftest_parameters.c:	user_param->use_odp			= 0;
src/perftest_parameters.c:	user_param->use_hugepages		= 0;
src/perftest_parameters.c:	user_param->use_promiscuous		= 0;
src/perftest_parameters.c:	user_param->use_sniffer			= 0;
src/perftest_parameters.c:	user_param->check_alive_exited		= 0;
src/perftest_parameters.c:	user_param->raw_mcast			= 0;
src/perftest_parameters.c:	user_param->masked_atomics		= 0;
src/perftest_parameters.c:	user_param->cache_line_size		= get_cache_line_size();
src/perftest_parameters.c:	user_param->cycle_buffer		= sysconf(_SC_PAGESIZE);
src/perftest_parameters.c:	if (user_param->cycle_buffer <= 0) {
src/perftest_parameters.c:		user_param->cycle_buffer = DEF_PAGE_SIZE;
src/perftest_parameters.c:	user_param->verb_type		= NORMAL_INTF;
src/perftest_parameters.c:	user_param->is_exp_cq		= 0;
src/perftest_parameters.c:	user_param->is_exp_qp		= 0;
src/perftest_parameters.c:	user_param->use_res_domain	= 0;
src/perftest_parameters.c:	user_param->mr_per_qp		= 0;
src/perftest_parameters.c:	user_param->dlid		= 0;
src/perftest_parameters.c:	user_param->traffic_class	= 0;
src/perftest_parameters.c:	user_param->disable_fcs		= 0;
src/perftest_parameters.c:	user_param->flows		= DEF_FLOWS;
src/perftest_parameters.c:	user_param->flows_burst		= 1;
src/perftest_parameters.c:	user_param->perform_warm_up	= 0;
src/perftest_parameters.c:	user_param->use_ooo		= 0;
src/perftest_parameters.c:	if (user_param->mtu == 0) {
src/perftest_parameters.c:		user_param->mtu = 1518;
src/perftest_parameters.c:	if(user_param->mtu >= MIN_MTU_RAW_ETERNET && user_param->mtu <= MAX_MTU_RAW_ETERNET) {
src/perftest_parameters.c:		user_param->curr_mtu = user_param->mtu;
src/perftest_parameters.c:		fprintf(stderr," Invalid MTU - %d \n",user_param->mtu);
src/perftest_parameters.c:	if (user_param->flows != DEF_FLOWS) {
src/perftest_parameters.c:		if (user_param->is_server_port == OFF) {
src/perftest_parameters.c:		if (user_param->test_type == ITERATIONS) {
src/perftest_parameters.c:			min_iter_req = user_param->flows * user_param->flows_burst;
src/perftest_parameters.c:			if (user_param->iters / min_iter_req < 1) {
src/perftest_parameters.c:				fprintf(stderr, " Set  N*%d Iterations \n", user_param->flows * user_param->flows_burst);
src/perftest_parameters.c:		if (user_param->tst == FS_RATE) {
src/perftest_parameters.c:		if (user_param->duplex) {
src/perftest_parameters.c:		if (user_param->flows_burst  > 1) {
src/perftest_parameters.c:	if (user_param->test_type == ITERATIONS) {
src/perftest_parameters.c:		if (user_param->tx_depth > user_param->iters) {
src/perftest_parameters.c:			user_param->tx_depth = user_param->iters;
src/perftest_parameters.c:		if (user_param->verb == SEND && user_param->rx_depth > user_param->iters) {
src/perftest_parameters.c:			user_param->rx_depth = user_param->iters;
src/perftest_parameters.c:		if (user_param->connection_type == UD || user_param->connection_type == UC) {
src/perftest_parameters.c:			if (user_param->rx_depth == DEF_RX_SEND) {
src/perftest_parameters.c:				user_param->rx_depth = (user_param->iters < UC_MAX_RX) ? user_param->iters : UC_MAX_RX;
src/perftest_parameters.c:	if (user_param->size > MSG_SIZE_CQ_MOD_LIMIT &&
src/perftest_parameters.c:		user_param->connection_type != UD &&
src/perftest_parameters.c:		user_param->test_method != RUN_ALL)
src/perftest_parameters.c:		if (!user_param->req_cq_mod) // user didn't request any cq_mod
src/perftest_parameters.c:			user_param->cq_mod = DISABLED_CQ_MOD_VALUE;
src/perftest_parameters.c:		else if (user_param->cq_mod > DISABLED_CQ_MOD_VALUE)
src/perftest_parameters.c:	if (user_param->tst == LAT_BY_BW && user_param->rate_limit_type == DISABLE_RATE_LIMIT) {
src/perftest_parameters.c:		if (user_param->output == FULL_VERBOSITY)
src/perftest_parameters.c:		user_param->rate_limit_type = SW_RATE_LIMIT;
src/perftest_parameters.c:	if (user_param->cq_mod > user_param->tx_depth) {
src/perftest_parameters.c:		user_param->cq_mod = user_param->tx_depth;
src/perftest_parameters.c:	if (user_param->verb == READ || user_param->verb == ATOMIC)
src/perftest_parameters.c:		user_param->inline_size = 0;
src/perftest_parameters.c:	if (user_param->test_method == RUN_ALL)
src/perftest_parameters.c:		user_param->size = MAX_SIZE;
src/perftest_parameters.c:	if (user_param->verb == ATOMIC && user_param->size != DEF_SIZE_ATOMIC) {
src/perftest_parameters.c:	if (user_param->use_srq && user_param->verb != SEND) {
src/perftest_parameters.c:	if (user_param->dualport == ON) {
src/perftest_parameters.c:		user_param->num_of_qps *= 2;
src/perftest_parameters.c:		if (user_param->tst != BW) {
src/perftest_parameters.c:		if (user_param->use_mcg){
src/perftest_parameters.c:		if (user_param->link_type != LINK_UNSPEC)
src/perftest_parameters.c:			user_param->link_type2 = user_param->link_type;
src/perftest_parameters.c:	if (user_param->post_list > 1) {
src/perftest_parameters.c:		if (!user_param->req_cq_mod) {
src/perftest_parameters.c:			user_param->cq_mod = user_param->post_list;
src/perftest_parameters.c:		} else if ((user_param->post_list % user_param->cq_mod) != 0) {
src/perftest_parameters.c:	if (user_param->test_type==DURATION) {
src/perftest_parameters.c:		user_param->iters = 0;
src/perftest_parameters.c:		user_param->noPeak = ON;
src/perftest_parameters.c:		if (user_param->use_event) {
src/perftest_parameters.c:		if (user_param->test_method == RUN_ALL) {
src/perftest_parameters.c:		if (user_param->cpu_util) {
src/perftest_parameters.c:			user_param->cpu_util_data.enable = 1;
src/perftest_parameters.c:	if ( (user_param->test_type != DURATION) && user_param->cpu_util ) {
src/perftest_parameters.c:	if (user_param->connection_type == RawEth) {
src/perftest_parameters.c:		if (user_param->test_method == RUN_ALL) {
src/perftest_parameters.c:		if (user_param->use_rdma_cm == ON || user_param->work_rdma_cm == ON) {
src/perftest_parameters.c:		if (user_param->use_gid_user) {
src/perftest_parameters.c:		if (user_param->mmap_file != NULL || user_param->mmap_offset) {
src/perftest_parameters.c:		if(user_param->machine == UNCHOSEN) {
src/perftest_parameters.c:		if(user_param->is_source_mac == OFF) {
src/perftest_parameters.c:		if(user_param->is_dest_mac == OFF && (user_param->tst == LAT || (user_param->machine == CLIENT && !user_param->raw_mcast))) {
src/perftest_parameters.c:		if((user_param->is_server_port == ON && user_param->is_client_port == OFF) || (user_param->is_server_port == OFF && user_param->is_client_port == ON)) {
src/perftest_parameters.c:		if ((user_param->is_server_port == ON) && (user_param->is_server_ip == OFF || user_param->is_client_ip == OFF)) {
src/perftest_parameters.c:		if (user_param->tcp == ON && user_param->is_server_port == OFF) {
src/perftest_parameters.c:		if (user_param->duplex == OFF && user_param->mac_fwd == ON) {
src/perftest_parameters.c:			user_param->duplex = ON;
src/perftest_parameters.c:		if (user_param->mac_fwd == ON && user_param->cq_mod >= user_param->rx_depth) {
src/perftest_parameters.c:			user_param->cq_mod = user_param->rx_depth < user_param->tx_depth ? user_param->rx_depth : user_param->tx_depth;
src/perftest_parameters.c:			fprintf(stderr," Changing CQ moderation to min( rx depth , tx depth) = %d.\n",user_param->cq_mod);
src/perftest_parameters.c:		if (user_param->raw_mcast && user_param->duplex) {
src/perftest_parameters.c:	if (user_param->use_mcg &&  user_param->gid_index == -1) {
src/perftest_parameters.c:		user_param->gid_index = 0;
src/perftest_parameters.c:	if (user_param->verb == ATOMIC && user_param->connection_type == DC) {
src/perftest_parameters.c:	if (user_param->work_rdma_cm) {
src/perftest_parameters.c:		if (user_param->connection_type == UC) {
src/perftest_parameters.c:		if (user_param->use_mcg) {
src/perftest_parameters.c:		if (user_param->dualport) {
src/perftest_parameters.c:		user_param->use_rdma_cm = ON;
src/perftest_parameters.c:	} else if (user_param->tos != DEF_TOS && user_param->connection_type != RawEth) {
src/perftest_parameters.c:	if (user_param->hop_limit != DEF_HOP_LIMIT && user_param->connection_type != RawEth) {
src/perftest_parameters.c:	if (user_param->use_mcg) {
src/perftest_parameters.c:		if (user_param->connection_type != UD)
src/perftest_parameters.c:			user_param->connection_type = UD;
src/perftest_parameters.c:		if (user_param->duplex) {
src/perftest_parameters.c:		if (user_param->num_of_qps > 1) {
src/perftest_parameters.c:	if(user_param->verb == ATOMIC && user_param->use_odp) {
src/perftest_parameters.c:	if (user_param->verb == SEND && user_param->tst == BW && user_param->machine == SERVER && !user_param->duplex )
src/perftest_parameters.c:		user_param->noPeak = ON;
src/perftest_parameters.c:	if (user_param->test_method == RUN_INFINITELY) {
src/perftest_parameters.c:		user_param->noPeak = ON;
src/perftest_parameters.c:		user_param->test_type = DURATION;
src/perftest_parameters.c:		if (user_param->use_event) {
src/perftest_parameters.c:		if (user_param->tst == LAT) {
src/perftest_parameters.c:		if (user_param->duplex && user_param->verb == SEND) {
src/perftest_parameters.c:		if (user_param->rate_limit_type != DISABLE_RATE_LIMIT) {
src/perftest_parameters.c:	if (user_param->connection_type == DC && !user_param->use_srq)
src/perftest_parameters.c:		user_param->use_srq = 1;
src/perftest_parameters.c:	if (user_param->connection_type == XRC) {
src/perftest_parameters.c:		if (user_param->work_rdma_cm == ON) {
src/perftest_parameters.c:		user_param->use_xrc = ON;
src/perftest_parameters.c:		user_param->use_srq = ON;
src/perftest_parameters.c:	if(user_param->connection_type == DC) {
src/perftest_parameters.c:		if (user_param->work_rdma_cm == ON) {
src/perftest_parameters.c:	if (user_param->use_rss) {
src/perftest_parameters.c:	if ((user_param->use_srq && (user_param->tst == LAT || user_param->machine == SERVER || user_param->duplex == ON)) || user_param->use_xrc)
src/perftest_parameters.c:		user_param->srq_exists = 1;
src/perftest_parameters.c:	if (user_param->burst_size > 0) {
src/perftest_parameters.c:		if (user_param->rate_limit_type == DISABLE_RATE_LIMIT && user_param->tst != LAT_BY_BW ) {
src/perftest_parameters.c:	if (user_param->burst_size <= 0) {
src/perftest_parameters.c:		if (user_param->rate_limit_type == SW_RATE_LIMIT)
src/perftest_parameters.c:			fprintf(stderr," Setting burst size to tx depth = %d\n", user_param->tx_depth);
src/perftest_parameters.c:		if (user_param->rate_limit_type != PP_RATE_LIMIT)
src/perftest_parameters.c:			user_param->burst_size = user_param->tx_depth;
src/perftest_parameters.c:	if (user_param->typical_pkt_size &&
src/perftest_parameters.c:	    user_param->rate_limit_type != PP_RATE_LIMIT){
src/perftest_parameters.c:	if (user_param->rate_limit_type == SW_RATE_LIMIT) {
src/perftest_parameters.c:		if (user_param->tst != BW || user_param->verb == ATOMIC || (user_param->verb == SEND && user_param->duplex)) {
src/perftest_parameters.c:	} else if (user_param->rate_limit_type == HW_RATE_LIMIT) {
src/perftest_parameters.c:		if (user_param->use_rdma_cm == ON || user_param->work_rdma_cm == ON) {
src/perftest_parameters.c:		switch (user_param->rate_units) {
src/perftest_parameters.c:				rate_limit_gbps =((double)(((user_param->rate_limit)*8*1024*1024) / 1000000000));
src/perftest_parameters.c:				rate_limit_gbps = user_param->rate_limit;
src/perftest_parameters.c:			get_gbps_str_by_ibv_rate(user_param->rate_limit_str, &rate_index_to_set);
src/perftest_parameters.c:			user_param->valid_hw_rate_limit_index = rate_index_to_set;
src/perftest_parameters.c:	} else if (user_param->rate_limit_type == PP_RATE_LIMIT) {
src/perftest_parameters.c:		if (user_param->rate_limit < 0) {
src/perftest_parameters.c:		if (user_param->connection_type != RawEth) {
src/perftest_parameters.c:		if (user_param->rate_units != MEGA_BYTE_PS) {
src/perftest_parameters.c:		user_param->rate_limit = user_param->rate_limit * 8 * 1024;
src/perftest_parameters.c:	if (user_param->tst == LAT_BY_BW) {
src/perftest_parameters.c:		if ( user_param->test_type == DURATION) {
src/perftest_parameters.c:		if (user_param->num_of_qps > 1) {
src/perftest_parameters.c:		if (user_param->duplex) {
src/perftest_parameters.c:		if(user_param->output != FULL_VERBOSITY && user_param->output != OUTPUT_LAT) {
src/perftest_parameters.c:	if (user_param->output != FULL_VERBOSITY) {
src/perftest_parameters.c:		if (user_param->tst == BW && !(user_param->output == OUTPUT_BW || user_param->output == OUTPUT_MR)) {
src/perftest_parameters.c:		if (user_param->tst == LAT && !(user_param->output == OUTPUT_LAT)) {
src/perftest_parameters.c:	if ( (user_param->latency_gap > 0) && user_param->tst != LAT ) {
src/perftest_parameters.c:	if ( user_param->test_type == DURATION && user_param->margin == DEF_INIT_MARGIN) {
src/perftest_parameters.c:		user_param->margin = user_param->duration / 4;
src/perftest_parameters.c:	if (user_param->connection_type == DC) {
src/perftest_parameters.c:		user_param->use_exp = 1;
src/perftest_parameters.c:	if (user_param->use_cuda) {
src/perftest_parameters.c:		if (user_param->tst != BW) {
src/perftest_parameters.c:	if (user_param->use_cuda && user_param->mmap_file != NULL) {
src/perftest_parameters.c:	if ( (user_param->connection_type == UD) && (user_param->inline_size > MAX_INLINE_UD) ) {
src/perftest_parameters.c:		user_param->inline_size = MAX_INLINE_UD;
src/perftest_parameters.c:	if (user_param->report_per_port && (user_param->test_type != DURATION || !user_param->dualport)) {
src/perftest_parameters.c:	if (user_param->verb == SEND && (user_param->rx_depth % 2 == 1) && user_param->test_method == RUN_REGULAR)
src/perftest_parameters.c:		user_param->rx_depth += 1;
src/perftest_parameters.c:	if (user_param->test_type == ITERATIONS && user_param->iters > 20000 && user_param->noPeak == OFF && user_param->tst == BW)
src/perftest_parameters.c:		user_param->noPeak = ON;
src/perftest_parameters.c:	if (!(user_param->duration > 2*user_param->margin)) {
src/perftest_parameters.c:	if((user_param->use_event == OFF) && user_param->use_eq_num == ON) {
src/perftest_parameters.c:	if (user_param->verb_type != NORMAL_INTF || user_param->use_res_domain) {
src/perftest_parameters.c:		user_param->is_exp_cq = 1;
src/perftest_parameters.c:		user_param->use_exp = 1;
src/perftest_parameters.c:	if (user_param->verb_type == ACCL_INTF) {
src/perftest_parameters.c:		if (user_param->connection_type != RC &&
src/perftest_parameters.c:			user_param->connection_type != UC && user_param->connection_type != RawEth) {
src/perftest_parameters.c:		if (user_param->verb != SEND) {
src/perftest_parameters.c:		if (user_param->num_of_qps > 1) {
src/perftest_parameters.c:		if (user_param->tst != BW) {
src/perftest_parameters.c:		if (user_param->duplex) {
src/perftest_parameters.c:		if (user_param->test_method == RUN_INFINITELY) {
src/perftest_parameters.c:	if (user_param->perform_warm_up &&
src/perftest_parameters.c:	    !(user_param->tst == BW &&
src/perftest_parameters.c:	    (user_param->verb == ATOMIC || user_param->verb == WRITE || user_param->verb == READ))) {
src/perftest_parameters.c:		if (user_param->inline_size != DEF_INLINE) {
src/perftest_parameters.c:		user_param->inline_size = 0;
src/perftest_parameters.c:	if (user_param->inline_size == DEF_INLINE) {
src/perftest_parameters.c:		if (user_param->tst ==LAT) {
src/perftest_parameters.c:			switch(user_param->verb) {
src/perftest_parameters.c:				case WRITE: user_param->inline_size = (user_param->connection_type == DC)? DEF_INLINE_DC : DEF_INLINE_WRITE; break;
src/perftest_parameters.c:				case SEND : user_param->inline_size = (user_param->connection_type == DC)? DEF_INLINE_DC : (user_param->connection_type == UD)? DEF_INLINE_SEND_UD :
src/perftest_parameters.c:					    ((user_param->connection_type == XRC) ? DEF_INLINE_SEND_XRC : DEF_INLINE_SEND_RC_UC) ; break;
src/perftest_parameters.c:				default   : user_param->inline_size = 0;
src/perftest_parameters.c:				user_param->inline_size = 96;
src/perftest_parameters.c:			user_param->inline_size = 0;
src/perftest_parameters.c:	if (user_param->is_new_raw_eth_param == 1 && user_param->is_old_raw_eth_param == 1) {
src/perftest_parameters.c:	if (user_param->is_new_raw_eth_param) {
src/perftest_parameters.c:			user_param->source_mac[i] = user_param->local_mac[i];
src/perftest_parameters.c:			user_param->dest_mac[i] = user_param->remote_mac[i];
src/perftest_parameters.c:		if (user_param->machine == SERVER) {
src/perftest_parameters.c:			user_param->server_ip = user_param->local_ip;
src/perftest_parameters.c:			user_param->client_ip = user_param->remote_ip;
src/perftest_parameters.c:			user_param->server_port = user_param->local_port;
src/perftest_parameters.c:			user_param->client_port = user_param->remote_port;
src/perftest_parameters.c:		} else if (user_param->machine == CLIENT) {
src/perftest_parameters.c:			user_param->server_ip = user_param->remote_ip;
src/perftest_parameters.c:			user_param->client_ip = user_param->local_ip;
src/perftest_parameters.c:			user_param->server_port = user_param->remote_port;
src/perftest_parameters.c:			user_param->client_port = user_param->local_port;
src/perftest_parameters.c:	if(user_param->connection_type == RawEth)
src/perftest_parameters.c:		user_param->machine = UNCHOSEN;
src/perftest_parameters.c:			case 'p': user_param->port = strtol(optarg, NULL, 0); break;
src/perftest_parameters.c:			case 'd': GET_STRING(user_param->ib_devname,strdupa(optarg)); break;
src/perftest_parameters.c:			case 'i': user_param->ib_port = strtol(optarg, NULL, 0);
src/perftest_parameters.c:				  if (user_param->ib_port < MIN_IB_PORT) {
src/perftest_parameters.c:			case 'm': user_param->mtu  = strtol(optarg, NULL, 0); break;
src/perftest_parameters.c:			case 'n': CHECK_VALUE(user_param->iters,int,MIN_ITER,MAX_ITER,"Iteration num"); break;
src/perftest_parameters.c:			case 't': CHECK_VALUE(user_param->tx_depth,int,MIN_TX,MAX_TX,"Tx depth"); break;
src/perftest_parameters.c:			case 'T': CHECK_VALUE(user_param->tos,int,MIN_TOS,MAX_TOS,"TOS"); break;
src/perftest_parameters.c:			case 'L': CHECK_VALUE(user_param->hop_limit,int,MIN_HOP_LIMIT,MAX_HOP_LIMIT,"Hop Limit"); break;
src/perftest_parameters.c:			case 'u': user_param->qp_timeout = (uint8_t)strtol(optarg, NULL, 0); break;
src/perftest_parameters.c:			case 'S': user_param->sl = (uint8_t)strtol(optarg, NULL, 0);
src/perftest_parameters.c:				  if (user_param->sl > MAX_SL) {
src/perftest_parameters.c:				  if (user_param->connection_type == RawEth)
src/perftest_parameters.c:					  user_param->raw_qos = 1;
src/perftest_parameters.c:			case 'x': CHECK_VALUE(user_param->gid_index, uint8_t, MIN_GID_IX, MAX_GID_IX, "Gid index");
src/perftest_parameters.c:				  user_param->use_gid_user = 1; break;
src/perftest_parameters.c:			case 'c': change_conn_type(&user_param->connection_type,user_param->verb,optarg); break;
src/perftest_parameters.c:			case 'q': if (user_param->tst != BW) {
src/perftest_parameters.c:				  CHECK_VALUE(user_param->num_of_qps,int,MIN_QP_NUM,MAX_QP_NUM,"num of Qps");
src/perftest_parameters.c:			case 'I': CHECK_VALUE(user_param->inline_size,int,0,MAX_INLINE,"Max inline");
src/perftest_parameters.c:				  if (user_param->verb == READ || user_param->verb ==ATOMIC) {
src/perftest_parameters.c:			case 'o': user_param->out_reads = strtol(optarg, NULL, 0);
src/perftest_parameters.c:				  if (user_param->verb != READ && user_param->verb != ATOMIC) {
src/perftest_parameters.c:			case 'M': GET_STRING(user_param->user_mgid,strdupa(optarg)); break;
src/perftest_parameters.c:			case 'r': CHECK_VALUE(user_param->rx_depth,int,MIN_RX,MAX_RX," Rx depth");
src/perftest_parameters.c:				  if (user_param->verb != SEND && user_param->rx_depth > DEF_RX_RDMA) {
src/perftest_parameters.c:			case 'Q': CHECK_VALUE(user_param->cq_mod,int,MIN_CQ_MOD,MAX_CQ_MOD,"CQ moderation");
src/perftest_parameters.c:				  user_param->req_cq_mod = 1;
src/perftest_parameters.c:				  if (user_param->verb != ATOMIC) {
src/perftest_parameters.c:					  user_param->atomicType = CMP_AND_SWAP;
src/perftest_parameters.c:					  user_param->atomicType = FETCH_AND_ADD;
src/perftest_parameters.c:			case 'l': user_param->post_list = strtol(optarg, NULL, 0); break;
src/perftest_parameters.c:			case 'D': user_param->duration = strtol(optarg, NULL, 0);
src/perftest_parameters.c:				  if (user_param->duration <= 0) {
src/perftest_parameters.c:				  user_param->test_type = DURATION;
src/perftest_parameters.c:			case 'f': user_param->margin = strtol(optarg, NULL, 0);
src/perftest_parameters.c:				  if (user_param->margin < 0) {
src/perftest_parameters.c:				  user_param->ib_port  = DEF_IB_PORT;
src/perftest_parameters.c:				  user_param->ib_port2 = DEF_IB_PORT2;
src/perftest_parameters.c:				  user_param->dualport = ON;
src/perftest_parameters.c:			case 'a': user_param->test_method = RUN_ALL; break;
src/perftest_parameters.c:			case 'F': user_param->cpu_freq_f = ON; break;
src/perftest_parameters.c:			case 'V': printf("Version: %s\n",user_param->version); return VERSION_EXIT;
src/perftest_parameters.c:			case 'h': usage(argv[0], user_param->verb, user_param->tst, user_param->connection_type);
src/perftest_parameters.c:				  if(user_param->connection_type == RawEth) {
src/perftest_parameters.c:					  usage_raw_ethernet(user_param->tst);
src/perftest_parameters.c:			case 'z': user_param->use_rdma_cm = ON; break;
src/perftest_parameters.c:			case 'R': user_param->work_rdma_cm = ON; break;
src/perftest_parameters.c:				  user_param->size = (uint64_t)strtol(optarg, NULL, 0) * size_factor;
src/perftest_parameters.c:				  user_param->req_size = 1;
src/perftest_parameters.c:				  if (user_param->size < 1 || user_param->size > (UINT_MAX / 2)) {
src/perftest_parameters.c:			case 'e': user_param->use_event = ON;
src/perftest_parameters.c:				  if (user_param->verb == WRITE) {
src/perftest_parameters.c:				  if (user_param->verb == WRITE) {
src/perftest_parameters.c:				  user_param->use_eq_num = ON;
src/perftest_parameters.c:				  CHECK_VALUE(user_param->eq_num, int, MIN_EQ_NUM, MAX_EQ_NUM, "EQN");
src/perftest_parameters.c:			case 'b': user_param->duplex = ON;
src/perftest_parameters.c:				  if (user_param->tst == LAT) {
src/perftest_parameters.c:			case 'N': user_param->noPeak = ON;
src/perftest_parameters.c:				  if (user_param->tst == LAT) {
src/perftest_parameters.c:				  if (user_param->tst != LAT) {
src/perftest_parameters.c:				  user_param->r_flag->cycles = ON;
src/perftest_parameters.c:			case 'g': user_param->use_mcg = ON;
src/perftest_parameters.c:				  if (user_param->verb != SEND) {
src/perftest_parameters.c:				  if (user_param->tst == BW) {
src/perftest_parameters.c:				  user_param->r_flag->histogram = ON;
src/perftest_parameters.c:				  if (user_param->tst == BW) {
src/perftest_parameters.c:				  user_param->r_flag->unsorted = ON;
src/perftest_parameters.c:				  user_param->is_old_raw_eth_param = 1;
src/perftest_parameters.c:				  user_param->is_source_mac = ON;
src/perftest_parameters.c:				  if(parse_mac_from_str(optarg, user_param->source_mac))
src/perftest_parameters.c:				  user_param->is_old_raw_eth_param = 1;
src/perftest_parameters.c:				  user_param->is_dest_mac = ON;
src/perftest_parameters.c:				  if(parse_mac_from_str(optarg, user_param->dest_mac))
src/perftest_parameters.c:				  user_param->is_old_raw_eth_param = 1;
src/perftest_parameters.c:				  user_param->is_server_ip = ON;
src/perftest_parameters.c:				  user_param->is_old_raw_eth_param = 1;
src/perftest_parameters.c:				  user_param->is_client_ip = ON;
src/perftest_parameters.c:				  user_param->is_old_raw_eth_param = 1;
src/perftest_parameters.c:				  user_param->is_server_port = ON;
src/perftest_parameters.c:				  user_param->server_port = strtol(optarg, NULL, 0);
src/perftest_parameters.c:				  if(OFF == check_if_valid_udp_port(user_param->server_port)) {
src/perftest_parameters.c:				  user_param->is_old_raw_eth_param = 1;
src/perftest_parameters.c:				  user_param->is_client_port = ON;
src/perftest_parameters.c:				  user_param->client_port = strtol(optarg, NULL, 0);
src/perftest_parameters.c:				  if(OFF == check_if_valid_udp_port(user_param->client_port)) {
src/perftest_parameters.c:				  user_param->is_ethertype = ON;
src/perftest_parameters.c:				  if (parse_ethertype_from_str(optarg, &user_param->ethertype)) {
src/perftest_parameters.c:				  user_param->is_limit_bw = ON;
src/perftest_parameters.c:				  user_param->limit_bw = strtof(optarg,NULL);
src/perftest_parameters.c:				  if (user_param->limit_bw < 0) {
src/perftest_parameters.c:				  user_param->is_limit_msgrate = ON;
src/perftest_parameters.c:				  user_param->limit_msgrate = strtof(optarg,NULL);
src/perftest_parameters.c:				  if (user_param->limit_msgrate < 0) {
src/perftest_parameters.c:			case 'P': user_param->machine = CLIENT; break;
src/perftest_parameters.c:			case 'Z': user_param->machine = SERVER; break;
src/perftest_parameters.c:			case 'v': user_param->mac_fwd = ON; break;
src/perftest_parameters.c:			case 'G': user_param->use_rss = ON; break;
src/perftest_parameters.c:					user_param->pkey_index = strtol(optarg,NULL,0);
src/perftest_parameters.c:					user_param->inline_recv_size = strtol(optarg,NULL,0);
src/perftest_parameters.c:					GET_STRING(user_param->rate_limit_str ,strdupa(optarg));
src/perftest_parameters.c:					user_param->rate_limit = atof(optarg);
src/perftest_parameters.c:					if (user_param->rate_limit <= 0) {
src/perftest_parameters.c:					if (user_param->rate_limit_type == DISABLE_RATE_LIMIT)
src/perftest_parameters.c:						user_param->rate_limit_type = HW_RATE_LIMIT;
src/perftest_parameters.c:					user_param->burst_size = strtol(optarg,NULL,0);
src/perftest_parameters.c:					if (user_param->burst_size < 0) {
src/perftest_parameters.c:					user_param->typical_pkt_size = strtol(optarg,NULL,0);
src/perftest_parameters.c:					if ((user_param->typical_pkt_size < 0) ||
src/perftest_parameters.c:					    (user_param->typical_pkt_size > 0xFFFF)) {
src/perftest_parameters.c:						user_param->rate_units = MEGA_BYTE_PS;
src/perftest_parameters.c:						user_param->rate_units = GIGA_BIT_PS;
src/perftest_parameters.c:						user_param->rate_units = PACKET_PS;
src/perftest_parameters.c:					user_param->is_rate_limit_type = 1;
src/perftest_parameters.c:						user_param->rate_limit_type = SW_RATE_LIMIT;
src/perftest_parameters.c:						user_param->rate_limit_type = HW_RATE_LIMIT;
src/perftest_parameters.c:						user_param->rate_limit_type = PP_RATE_LIMIT;
src/perftest_parameters.c:						user_param->output = OUTPUT_BW;
src/perftest_parameters.c:						user_param->output = OUTPUT_MR;
src/perftest_parameters.c:						user_param->output = OUTPUT_LAT;
src/perftest_parameters.c:					user_param->latency_gap = strtol(optarg,NULL,0);
src/perftest_parameters.c:					if (user_param->latency_gap < 0) {
src/perftest_parameters.c:					user_param->flow_label = strtol(optarg,NULL,0);
src/perftest_parameters.c:					if (user_param->flow_label < 0) {
src/perftest_parameters.c:					user_param->retry_count = strtol(optarg,NULL,0);
src/perftest_parameters.c:					if (user_param->retry_count < 0) {
src/perftest_parameters.c:						user_param->verb_type = NORMAL_INTF;
src/perftest_parameters.c:						user_param->verb_type = ACCL_INTF;
src/perftest_parameters.c:					user_param->mmap_file = strdup(optarg);
src/perftest_parameters.c:					user_param->mmap_offset = strtol(optarg, NULL, 0);
src/perftest_parameters.c:					user_param->dlid = (uint16_t)strtol(optarg, NULL, 0);
src/perftest_parameters.c:					user_param->traffic_class = (uint16_t)strtol(optarg, NULL, 0);
src/perftest_parameters.c:					user_param->wait_destroy = (uint32_t)strtol(optarg, NULL, 0);
src/perftest_parameters.c:					user_param->flows = (uint16_t)strtol(optarg, NULL, 0);
src/perftest_parameters.c:					if (user_param->flows == 0) {
src/perftest_parameters.c:					user_param->flows_burst = (uint16_t)strtol(optarg, NULL, 0);
src/perftest_parameters.c:					if (user_param->flows_burst == 0) {
src/perftest_parameters.c:					user_param->link_type = str_link_layer(optarg);
src/perftest_parameters.c:					if (user_param->link_type == LINK_FAILURE) {
src/perftest_parameters.c:					user_param->is_new_raw_eth_param = 1;
src/perftest_parameters.c:					user_param->is_dest_mac = 1;
src/perftest_parameters.c:					if(parse_mac_from_str(optarg, user_param->remote_mac))
src/perftest_parameters.c:					user_param->is_new_raw_eth_param = 1;
src/perftest_parameters.c:					user_param->is_source_mac = 1;
src/perftest_parameters.c:					if(parse_mac_from_str(optarg, user_param->local_mac))
src/perftest_parameters.c:					user_param->is_new_raw_eth_param = 1;
src/perftest_parameters.c:					user_param->is_client_ip = 1;
src/perftest_parameters.c:					user_param->is_new_raw_eth_param = 1;
src/perftest_parameters.c:					user_param->is_server_ip = 1;
src/perftest_parameters.c:					user_param->is_new_raw_eth_param = 1;
src/perftest_parameters.c:					user_param->is_client_port = 1;
src/perftest_parameters.c:					user_param->remote_port = strtol(optarg, NULL, 0);
src/perftest_parameters.c:					if(OFF == check_if_valid_udp_port(user_param->remote_port)) {
src/perftest_parameters.c:					user_param->is_new_raw_eth_param = 1;
src/perftest_parameters.c:					user_param->is_server_port = 1;
src/perftest_parameters.c:					user_param->local_port = strtol(optarg, NULL, 0);
src/perftest_parameters.c:					if(OFF == check_if_valid_udp_port(user_param->local_port)) {
src/perftest_parameters.c:					user_param->reply_every = strtol(optarg, NULL, 0);
src/perftest_parameters.c:					user_param->vlan_pcp = strtol(optarg, NULL, 0);
src/perftest_parameters.c:					user_param->vlan_en = ON;
src/perftest_parameters.c:					if (user_param->vlan_pcp > 8) {
src/perftest_parameters.c:				  usage(argv[0], user_param->verb, user_param->tst, user_param->connection_type);
src/perftest_parameters.c:				  if(user_param->connection_type == RawEth) {
src/perftest_parameters.c:					  usage_raw_ethernet(user_param->tst);
src/perftest_parameters.c:		user_param->tcp = 1;
src/perftest_parameters.c:		user_param->test_method = RUN_INFINITELY;
src/perftest_parameters.c:		user_param->use_srq = 1;
src/perftest_parameters.c:		user_param->report_fmt = GBS;
src/perftest_parameters.c:		user_param->dont_xchg_versions = 1;
src/perftest_parameters.c:		user_param->use_exp = 1;
src/perftest_parameters.c:		user_param->use_res_domain = 1;
src/perftest_parameters.c:		user_param->use_cuda = 1;
src/perftest_parameters.c:		user_param->report_both = 1;
src/perftest_parameters.c:		user_param->is_reversed = 1;
src/perftest_parameters.c:		user_param->cpu_util = 1;
src/perftest_parameters.c:		user_param->report_per_port = 1;
src/perftest_parameters.c:		user_param->ipv6 = 1;
src/perftest_parameters.c:		if (user_param->is_new_raw_eth_param) {
src/perftest_parameters.c:			if (user_param->is_server_ip) {
src/perftest_parameters.c:							  (struct in6_addr *)&(user_param->local_ip6))) {
src/perftest_parameters.c:			if (user_param->is_client_ip) {
src/perftest_parameters.c:							  (struct in6_addr *)&(user_param->remote_ip6))) {
src/perftest_parameters.c:			if (user_param->is_server_ip) {
src/perftest_parameters.c:							  (struct in6_addr *)&(user_param->server_ip6))) {
src/perftest_parameters.c:			if (user_param->is_client_ip) {
src/perftest_parameters.c:							  (struct in6_addr *)&(user_param->client_ip6))) {
src/perftest_parameters.c:		user_param->raw_ipv6 = 1;
src/perftest_parameters.c:		if (user_param->is_new_raw_eth_param) {
src/perftest_parameters.c:			if (user_param->is_server_ip) {
src/perftest_parameters.c:							  &(user_param->local_ip))) {
src/perftest_parameters.c:			if (user_param->is_client_ip) {
src/perftest_parameters.c:							  &(user_param->remote_ip))) {
src/perftest_parameters.c:			if (user_param->is_server_ip) {
src/perftest_parameters.c:							  &(user_param->server_ip))) {
src/perftest_parameters.c:			if (user_param->is_client_ip) {
src/perftest_parameters.c:							  &(user_param->client_ip))) {
src/perftest_parameters.c:		user_param->use_odp = 1;
src/perftest_parameters.c:		user_param->use_hugepages = 1;
src/perftest_parameters.c:		user_param->use_promiscuous = 1;
src/perftest_parameters.c:		user_param->use_sniffer = 1;
src/perftest_parameters.c:		user_param->raw_mcast = 1;
src/perftest_parameters.c:		user_param->mr_per_qp = 1;
src/perftest_parameters.c:		user_param->disable_fcs = 1;
src/perftest_parameters.c:		user_param->perform_warm_up = 1;
src/perftest_parameters.c:		user_param->use_ooo = 1;
src/perftest_parameters.c:		user_param->vlan_en = ON;
src/perftest_parameters.c:		user_param->print_eth_func = &print_ethernet_vlan_header;
src/perftest_parameters.c:		GET_STRING(user_param->servername,strdupa(argv[optind]));
src/perftest_parameters.c:	if(user_param->connection_type != RawEth)
src/perftest_parameters.c:		user_param->machine = user_param->servername ? CLIENT : SERVER;
src/perftest_parameters.c:	if (user_param->is_reversed) {
src/perftest_parameters.c:		if (user_param->machine == SERVER)
src/perftest_parameters.c:			user_param->machine = CLIENT;
src/perftest_parameters.c:			user_param->machine = SERVER;
src/perftest_parameters.c:	user_param->transport_type = context->device->transport_type;
src/perftest_parameters.c:	if (user_param->link_type == IBV_LINK_LAYER_ETHERNET &&  user_param->gid_index == -1) {
src/perftest_parameters.c:		user_param->gid_index = 0;
src/perftest_parameters.c:	if (user_param->connection_type == RawEth) {
src/perftest_parameters.c:		if (user_param->link_type != IBV_LINK_LAYER_ETHERNET) {
src/perftest_parameters.c:		user_param->curr_mtu = set_mtu(context,user_param->ib_port,user_param->mtu);
src/perftest_parameters.c:	if (user_param->dualport==ON) {
src/perftest_parameters.c:		if (user_param->link_type2 == IBV_LINK_LAYER_ETHERNET &&  user_param->gid_index2 == -1) {
src/perftest_parameters.c:			user_param->gid_index2 = 1;
src/perftest_parameters.c:	if (user_param->verb == READ || user_param->verb == ATOMIC)
src/perftest_parameters.c:		user_param->out_reads = ctx_set_out_reads(context,user_param->out_reads);
src/perftest_parameters.c:		user_param->out_reads = 1;
src/perftest_parameters.c:	if (user_param->connection_type == UD && user_param->size > MTU_SIZE(user_param->curr_mtu)) {
src/perftest_parameters.c:		if (user_param->test_method == RUN_ALL) {
src/perftest_parameters.c:			fprintf(stderr," Max msg size in UD is MTU %lu\n",MTU_SIZE(user_param->curr_mtu));
src/perftest_parameters.c:		user_param->size = MTU_SIZE(user_param->curr_mtu);
src/perftest_parameters.c:	if (user_param->connection_type == RawEth){
src/perftest_parameters.c:		if (user_param->size > user_param->curr_mtu) {
src/perftest_parameters.c:			fprintf(stderr," Max msg size in RawEth is MTU %d\n",user_param->curr_mtu);
src/perftest_parameters.c:			user_param->size = user_param->curr_mtu;
src/perftest_parameters.c:		} else if (user_param->size < RAWETH_MIN_MSG_SIZE) {
src/perftest_parameters.c:			user_param->size = RAWETH_MIN_MSG_SIZE;
src/perftest_parameters.c:	if (!user_param->ib_devname)
src/perftest_parameters.c:		GET_STRING(user_param->ib_devname,ibv_get_device_name(context->device))
src/perftest_parameters.c:	if (user_param->pkey_index > 0)
src/perftest_parameters.c:		user_param->pkey_index = ctx_chk_pkey_index(context, user_param->pkey_index);
src/perftest_parameters.c:	user_param->transport_type = context->device->transport_type;
src/perftest_parameters.c:	if (user_param->link_type == IBV_LINK_LAYER_ETHERNET &&  user_param->gid_index == -1) {
src/perftest_parameters.c:		user_param->gid_index = 0;
src/perftest_parameters.c:	if (user_param->connection_type == RawEth) {
src/perftest_parameters.c:		if (user_param->link_type != IBV_LINK_LAYER_ETHERNET) {
src/perftest_parameters.c:	if (user_param->dualport==ON) {
src/perftest_parameters.c:		if (user_param->link_type2 == IBV_LINK_LAYER_ETHERNET &&  user_param->gid_index2 == -1) {
src/perftest_parameters.c:			user_param->gid_index2 = 1;
src/perftest_parameters.c:	if (user_param->verb == READ || user_param->verb == ATOMIC)
src/perftest_parameters.c:		user_param->out_reads = ctx_set_out_reads(context,user_param->out_reads);
src/perftest_parameters.c:		user_param->out_reads = 1;
src/perftest_parameters.c:	if (!user_param->ib_devname)
src/perftest_parameters.c:		GET_STRING(user_param->ib_devname,ibv_get_device_name(context->device))
src/perftest_parameters.c:	if (user_param->pkey_index > 0)
src/perftest_parameters.c:		user_param->pkey_index = ctx_chk_pkey_index(context, user_param->pkey_index);
src/perftest_parameters.c:	if (user_param->output != FULL_VERBOSITY)
src/perftest_parameters.c:	printf("%s ",testsStr[user_param->verb]);
src/perftest_parameters.c:	if (user_param->verb == ATOMIC) {
src/perftest_parameters.c:		printf("%s ",atomicTypesStr[user_param->atomicType]);
src/perftest_parameters.c:	if (user_param->tst == BW) {
src/perftest_parameters.c:		if (user_param->duplex) {
src/perftest_parameters.c:		if (user_param->post_list > 1) {
src/perftest_parameters.c:	} else if (user_param->tst == LAT) {
src/perftest_parameters.c:	if (user_param->mac_fwd) {
src/perftest_parameters.c:	if (user_param->use_mcg)
src/perftest_parameters.c:	if (user_param->use_event) {
src/perftest_parameters.c:		printf(" Test with events. Using %s_comp%d\n", user_param->ib_devname, user_param->eq_num);
src/perftest_parameters.c:	if (user_param->use_mcg)
src/perftest_parameters.c:	printf(" Dual-port       : %s\t\tDevice         : %s\n", user_param->dualport ? "ON" : "OFF",user_param->ib_devname);
src/perftest_parameters.c:	printf(" Number of qps   : %d\t\tTransport type : %s\n", user_param->num_of_qps, transport_str(user_param->transport_type));
src/perftest_parameters.c:	printf(" Connection type : %s\t\tUsing SRQ      : %s\n", connStr[user_param->connection_type], user_param->use_srq ? "ON"  : "OFF");
src/perftest_parameters.c:	if (user_param->machine == CLIENT || user_param->duplex) {
src/perftest_parameters.c:		printf(" TX depth        : %d\n",user_param->tx_depth);
src/perftest_parameters.c:	if (user_param->post_list > 1)
src/perftest_parameters.c:		printf(" Post List       : %d\n",user_param->post_list);
src/perftest_parameters.c:	if (user_param->verb == SEND && (user_param->machine == SERVER || user_param->duplex)) {
src/perftest_parameters.c:		printf(" RX depth        : %d\n",user_param->rx_depth);
src/perftest_parameters.c:	if (user_param->tst == BW) {
src/perftest_parameters.c:		printf(" CQ Moderation   : %d\n",user_param->cq_mod);
src/perftest_parameters.c:	printf(" Mtu             : %lu[B]\n",user_param->connection_type == RawEth ? user_param->curr_mtu : MTU_SIZE(user_param->curr_mtu));
src/perftest_parameters.c:	printf(" Link type       : %s\n" ,link_layer_str(user_param->link_type));
src/perftest_parameters.c:	if (user_param->mac_fwd == ON)
src/perftest_parameters.c:		printf(" Buffer size     : %d[B]\n" ,user_param->buff_size/2);
src/perftest_parameters.c:	if (user_param->gid_index != DEF_GID_INDEX)
src/perftest_parameters.c:		printf(" GID index       : %d\n", user_param->gid_index);
src/perftest_parameters.c:	if ((user_param->dualport == ON) && (user_param->gid_index2 != DEF_GID_INDEX))
src/perftest_parameters.c:		printf(" GID index2      : %d\n", user_param->gid_index2);
src/perftest_parameters.c:	if (user_param->verb != READ && user_param->verb != ATOMIC)
src/perftest_parameters.c:		printf(" Max inline data : %d[B]\n",user_param->inline_size);
src/perftest_parameters.c:		printf(" Outstand reads  : %d\n",user_param->out_reads);
src/perftest_parameters.c:	printf(" rdma_cm QPs	 : %s\n",qp_state[user_param->work_rdma_cm]);
src/perftest_parameters.c:	if (user_param->use_rdma_cm)
src/perftest_parameters.c:	if (user_param->work_rdma_cm) {
src/perftest_parameters.c:		if (user_param->tos != DEF_TOS) {
src/perftest_parameters.c:			printf(" \tTOS    : %d",user_param->tos);
src/perftest_parameters.c:		if (user_param->machine == SERVER) {
src/perftest_parameters.c:	ustat_diff = user_param->cpu_util_data.ustat[1] - user_param->cpu_util_data.ustat[0];
src/perftest_parameters.c:	idle_diff = user_param->cpu_util_data.idle[1] - user_param->cpu_util_data.idle[0];
src/perftest_parameters.c:	int num_of_qps = user_param->num_of_qps;
src/perftest_parameters.c:	uint64_t num_of_calculated_iters = user_param->iters;
src/perftest_parameters.c:	if (user_param->test_method == RUN_INFINITELY)
src/perftest_parameters.c:		user_param->tcompleted[opt_posted]= get_cycles();
src/perftest_parameters.c:	opt_delta = user_param->tcompleted[opt_posted] - user_param->tposted[opt_completed];
src/perftest_parameters.c:	if((user_param->connection_type == DC ||user_param->use_xrc) && user_param->duplex)
src/perftest_parameters.c:	if (user_param->noPeak == OFF) {
src/perftest_parameters.c:		for (i = 0; i < num_of_calculated_iters * num_of_qps; i += user_param->post_list) {
src/perftest_parameters.c:			for (j = ROUND_UP(i + 1, user_param->cq_mod) - 1; j < num_of_calculated_iters * num_of_qps;
src/perftest_parameters.c:					j += user_param->cq_mod) {
src/perftest_parameters.c:				t = (user_param->tcompleted[j] - user_param->tposted[i]) / (j - i + 1);
src/perftest_parameters.c:			if ((num_of_calculated_iters * num_of_qps) % user_param->cq_mod) {
src/perftest_parameters.c:				t = (user_param->tcompleted[j] - user_param->tposted[i]) / (j - i + 1);
src/perftest_parameters.c:	cycles_to_units = get_cpu_mhz(user_param->cpu_freq_f) * 1000000;
src/perftest_parameters.c:	if ((cycles_to_units == 0 && !user_param->cpu_freq_f)) {
src/perftest_parameters.c:	run_inf_bi_factor = (user_param->duplex && user_param->test_method == RUN_INFINITELY) ? (user_param->verb == SEND ? 1 : 2) : 1 ;
src/perftest_parameters.c:	tsize = run_inf_bi_factor * user_param->size;
src/perftest_parameters.c:	num_of_calculated_iters *= (user_param->test_type == DURATION) ? 1 : num_of_qps;
src/perftest_parameters.c:	location_arr = (user_param->noPeak) ? 0 : num_of_calculated_iters - 1;
src/perftest_parameters.c:	format_factor = (user_param->report_fmt == MBS) ? 0x100000 : 125000000;
src/perftest_parameters.c:	sum_of_test_cycles = ((double)(user_param->tcompleted[location_arr] - user_param->tposted[0]));
src/perftest_parameters.c:	double bw_avg_p1 = ((double)tsize*user_param->iters_per_port[0] * cycles_to_units) / (sum_of_test_cycles * format_factor);
src/perftest_parameters.c:	double msgRate_avg_p1 = ((double)user_param->iters_per_port[0] * cycles_to_units * run_inf_bi_factor) / (sum_of_test_cycles * 1000000);
src/perftest_parameters.c:	double bw_avg_p2 = ((double)tsize*user_param->iters_per_port[1] * cycles_to_units) / (sum_of_test_cycles * format_factor);
src/perftest_parameters.c:	double msgRate_avg_p2 = ((double)user_param->iters_per_port[1] * cycles_to_units * run_inf_bi_factor) / (sum_of_test_cycles * 1000000);
src/perftest_parameters.c:	peak_up = !(user_param->noPeak)*(cycles_t)tsize*(cycles_t)cycles_to_units;
src/perftest_parameters.c:	my_bw_rep->size = (unsigned long)user_param->size;
src/perftest_parameters.c:	my_bw_rep->sl = user_param->sl;
src/perftest_parameters.c:	if (!user_param->duplex || (user_param->verb == SEND && user_param->test_type == DURATION)
src/perftest_parameters.c:			|| user_param->test_method == RUN_INFINITELY || user_param->connection_type == RawEth)
src/perftest_parameters.c:	int inc_accuracy = ((bw_avg < 0.1) && (user_param->report_fmt == GBS));
src/perftest_parameters.c:	if ( (user_param->duplex && rem_bw_rep != NULL) ||  (!user_param->duplex && rem_bw_rep == NULL)) {
src/perftest_parameters.c:		if ( ((user_param->is_limit_bw == ON )&& (user_param->limit_bw > bw_avg)) )
src/perftest_parameters.c:			user_param->is_bw_limit_passed |= 0;
src/perftest_parameters.c:			user_param->is_bw_limit_passed |= 1;
src/perftest_parameters.c:		if ( (user_param->is_limit_msgrate) && (user_param->limit_msgrate > msgRate_avg) )
src/perftest_parameters.c:			user_param->is_msgrate_limit_passed |= 0;
src/perftest_parameters.c:			user_param->is_msgrate_limit_passed |= 1;
src/perftest_parameters.c:	if (user_param->output == OUTPUT_BW)
src/perftest_parameters.c:	else if (user_param->output == OUTPUT_MR)
src/perftest_parameters.c:	else if (user_param->raw_qos)
src/perftest_parameters.c:	else if (user_param->report_per_port)
src/perftest_parameters.c:	if (user_param->output == FULL_VERBOSITY) {
src/perftest_parameters.c:		fprintf(stdout, user_param->cpu_util_data.enable ? REPORT_EXT_CPU_UTIL : REPORT_EXT , calc_cpu_util(user_param));
src/perftest_parameters.c:	measure_cnt = (user_param->tst == LAT) ? user_param->iters - 1 : (user_param->iters) / user_param->reply_every;
src/perftest_parameters.c:	rtt_factor = (user_param->verb == READ || user_param->verb == ATOMIC) ? 1 : 2;
src/perftest_parameters.c:	if (user_param->r_flag->cycles) {
src/perftest_parameters.c:		cycles_to_units = get_cpu_mhz(user_param->cpu_freq_f);
src/perftest_parameters.c:	if (user_param->tst == LAT) {
src/perftest_parameters.c:			delta[i] = user_param->tposted[i + 1] - user_param->tposted[i];
src/perftest_parameters.c:	} else if (user_param->tst == LAT_BY_BW) {
src/perftest_parameters.c:			delta[i] = user_param->tcompleted[i] - user_param->tposted[i];
src/perftest_parameters.c:	if (user_param->r_flag->unsorted) {
src/perftest_parameters.c:	if (user_param->r_flag->histogram) {
src/perftest_parameters.c:	if (user_param->r_flag->unsorted || user_param->r_flag->histogram) {
src/perftest_parameters.c:		if (user_param->output == FULL_VERBOSITY) {
src/perftest_parameters.c:			printf("%s",(user_param->test_type == ITERATIONS) ? RESULT_FMT_LAT : RESULT_FMT_LAT_DUR);
src/perftest_parameters.c:			printf((user_param->cpu_util_data.enable ? RESULT_EXT_CPU_UTIL : RESULT_EXT));
src/perftest_parameters.c:	if (user_param->output == OUTPUT_LAT)
src/perftest_parameters.c:				(unsigned long)user_param->size,
src/perftest_parameters.c:				user_param->iters,
src/perftest_parameters.c:		printf( user_param->cpu_util_data.enable ? REPORT_EXT_CPU_UTIL : REPORT_EXT , calc_cpu_util(user_param));
src/perftest_parameters.c:	rtt_factor = (user_param->verb == READ || user_param->verb == ATOMIC) ? 1 : 2;
src/perftest_parameters.c:	cycles_to_units = get_cpu_mhz(user_param->cpu_freq_f);
src/perftest_parameters.c:	test_sample_time = (user_param->tcompleted[0] - user_param->tposted[0]);
src/perftest_parameters.c:	latency = (((test_sample_time / cycles_to_units) / rtt_factor) / user_param->iters);
src/perftest_parameters.c:	tps = user_param->iters / (test_sample_time / (cycles_to_units * 1000000));
src/perftest_parameters.c:	if (user_param->output == OUTPUT_LAT) {
src/perftest_parameters.c:				user_param->size,
src/perftest_parameters.c:				user_param->iters,
src/perftest_parameters.c:		printf( user_param->cpu_util_data.enable ? REPORT_EXT_CPU_UTIL : REPORT_EXT , calc_cpu_util(user_param));
src/perftest_parameters.c:	if (user_param->r_flag->cycles) {
src/perftest_parameters.c:		units_to_sec =  get_cpu_mhz(user_param->cpu_freq_f);
src/perftest_parameters.c:		cycles_to_units = get_cpu_mhz(user_param->cpu_freq_f);
src/perftest_parameters.c:	if (user_param->test_type == ITERATIONS) {
src/perftest_parameters.c:		measure_cnt = user_param->flows;
src/perftest_parameters.c:			delta[i] = user_param->tcompleted[i] - user_param->tposted[i];
src/perftest_parameters.c:		if (user_param->r_flag->unsorted) {
src/perftest_parameters.c:		if (user_param->r_flag->histogram) {
src/perftest_parameters.c:		test_sample_time = (user_param->tcompleted[0] - user_param->tposted[0]);
src/perftest_parameters.c:		latency = test_sample_time  / user_param->iters / cycles_to_units;
src/perftest_parameters.c:		fps = user_param->iters / (test_sample_time / (cycles_to_units * units_to_sec));
src/perftest_parameters.c:	if (user_param->output == FULL_VERBOSITY) {
src/perftest_parameters.c:		printf("%s", (user_param->test_type == ITERATIONS) ? RESULT_FMT_FS_RATE : RESULT_FMT_FS_RATE_DUR);
src/perftest_parameters.c:		printf((user_param->cpu_util_data.enable ? RESULT_EXT_CPU_UTIL : RESULT_EXT));
src/perftest_parameters.c:	if (user_param->output == OUTPUT_LAT)
src/perftest_parameters.c:		if (user_param->test_type == ITERATIONS) {
src/perftest_parameters.c:				user_param->iters,
src/perftest_parameters.c:				user_param->iters,
src/perftest_parameters.c:		printf(user_param->cpu_util_data.enable ? REPORT_EXT_CPU_UTIL : REPORT_EXT, calc_cpu_util(user_param));
src/raw_ethernet_send_burst_lat.c:	/*set up the connection, return the required flow rules (notice that user_param->duplex == TRUE)
src/perftest_communication.c:	wr.wr.ud.remote_qpn  = user_param->rem_ud_qpn;
src/perftest_communication.c:	wr.wr.ud.remote_qkey = user_param->rem_ud_qkey;
src/perftest_communication.c:	user_param->rem_ud_qpn = ntohl(wc.imm_data);
src/perftest_communication.c:	user_param->rem_ud_qkey = attr.qkey;
src/perftest_communication.c:		if (is_ipv4_rival && !is_ipv4 && !user_param->ipv6)
src/perftest_communication.c:		else if (!is_ipv4_rival && is_ipv4 && user_param->ipv6)
src/perftest_communication.c:	int num_of_qps = user_param->num_of_qps;
src/perftest_communication.c:	int num_of_qps_per_port = user_param->num_of_qps / 2;
src/perftest_communication.c:	if ( (user_param->connection_type == DC || user_param->use_xrc) && (user_param->duplex || user_param->tst == LAT)) {
src/perftest_communication.c:	if (user_param->gid_index != -1) {
src/perftest_communication.c:		if (ibv_query_port(ctx->context, user_param->ib_port, &attr))
src/perftest_communication.c:		if (user_param->use_gid_user) {
src/perftest_communication.c:			if (ibv_query_gid(ctx->context, user_param->ib_port, user_param->gid_index, &temp_gid))
src/perftest_communication.c:			user_param->gid_index = get_best_gid_index(ctx, user_param, &attr, user_param->ib_port);
src/perftest_communication.c:			if (user_param->gid_index < 0)
src/perftest_communication.c:			if (ibv_query_gid(ctx->context, user_param->ib_port, user_param->gid_index, &temp_gid))
src/perftest_communication.c:	if (user_param->dualport == ON) {
src/perftest_communication.c:		if (user_param->gid_index2 != -1) {
src/perftest_communication.c:			if (ibv_query_port(ctx->context, user_param->ib_port2, &attr))
src/perftest_communication.c:			if (user_param->use_gid_user) {
src/perftest_communication.c:				if (ibv_query_gid(ctx->context, user_param->ib_port2, user_param->gid_index, &temp_gid2))
src/perftest_communication.c:				user_param->gid_index2 = get_best_gid_index(ctx, user_param, &attr, user_param->ib_port2);
src/perftest_communication.c:				if (user_param->gid_index2 < 0)
src/perftest_communication.c:				if (ibv_query_gid(ctx->context, user_param->ib_port2, user_param->gid_index2, &temp_gid2))
src/perftest_communication.c:	for (i = 0; i < user_param->num_of_qps; i++) {
src/perftest_communication.c:		if (user_param->dualport == ON) {
src/perftest_communication.c:				my_dest[i].lid   = ctx_get_local_lid(ctx->context,user_param->ib_port);
src/perftest_communication.c:				my_dest[i].gid_index = user_param->gid_index;
src/perftest_communication.c:				my_dest[i].lid   = ctx_get_local_lid(ctx->context,user_param->ib_port2);
src/perftest_communication.c:				my_dest[i].gid_index = user_param->gid_index2;
src/perftest_communication.c:			my_dest[i].lid   = ctx_get_local_lid(ctx->context,user_param->ib_port);
src/perftest_communication.c:			my_dest[i].gid_index = user_param->gid_index;
src/perftest_communication.c:		my_dest[i].out_reads = user_param->out_reads;
src/perftest_communication.c:		if (user_param->mr_per_qp)
src/perftest_communication.c:			my_dest[i].vaddr = (uintptr_t)ctx->buf[0] + (user_param->num_of_qps + i)*BUFF_SIZE(ctx->size,ctx->cycle_buffer);
src/perftest_communication.c:		if (user_param->dualport==ON) {
src/perftest_communication.c:		if ( (user_param->gid_index < 0) ||  ((user_param->gid_index2 < 0) && (user_param->dualport == ON))  ){
src/perftest_communication.c:	if (user_param->use_xrc) {
src/perftest_communication.c:		for (i=0; i < user_param->num_of_qps; i++) {
src/perftest_communication.c:	if(user_param->machine == SERVER || user_param->duplex || user_param->tst == LAT) {
src/perftest_communication.c:		if (user_param->connection_type == DC) {
src/perftest_communication.c:			for (i=0; i < user_param->num_of_qps; i++) {
src/perftest_communication.c:	if (check_add_port(&service,user_param->port,user_param->servername,&hints,&res)) {
src/perftest_communication.c:	sin.sin_port = htons((unsigned short)user_param->port);
src/perftest_communication.c:	if (user_param->tos != DEF_TOS) {
src/perftest_communication.c:		if (rdma_set_option(ctx->cm_id,RDMA_OPTION_ID,RDMA_OPTION_ID_TOS,&user_param->tos,sizeof(uint8_t))) {
src/perftest_communication.c:	temp = user_param->work_rdma_cm;
src/perftest_communication.c:	user_param->work_rdma_cm = ON;
src/perftest_communication.c:	if (user_param->verb == READ || user_param->verb == ATOMIC) {
src/perftest_communication.c:		conn_param.responder_resources = user_param->out_reads;
src/perftest_communication.c:		conn_param.initiator_depth = user_param->out_reads;
src/perftest_communication.c:	user_param->work_rdma_cm = temp;
src/perftest_communication.c:	conn_param.retry_count = user_param->retry_count;
src/perftest_communication.c:	if (user_param->work_rdma_cm == OFF) {
src/perftest_communication.c:  printf("[debug] right before RDMA_CM UD processing type=%d (ud=2)\n", user_param->connection_type);
src/perftest_communication.c:	if (user_param->connection_type == UD) {
src/perftest_communication.c:		user_param->rem_ud_qpn  = event->param.ud.qp_num;
src/perftest_communication.c:		user_param->rem_ud_qkey = event->param.ud.qkey;
src/perftest_communication.c:		if (user_param->tst == LAT || (user_param->tst == BW && user_param->duplex)) {
src/perftest_communication.c:	if (check_add_port(&service,user_param->port,user_param->servername,&hints,&res)) {
src/perftest_communication.c:	sin.sin_port = htons((unsigned short)user_param->port);
src/perftest_communication.c:	if (user_param->work_rdma_cm == ON)
src/perftest_communication.c:	temp = user_param->work_rdma_cm;
src/perftest_communication.c:	user_param->work_rdma_cm = ON;
src/perftest_communication.c:	if (user_param->verb == READ || user_param->verb == ATOMIC) {
src/perftest_communication.c:		conn_param.responder_resources = user_param->out_reads;
src/perftest_communication.c:		conn_param.initiator_depth = user_param->out_reads;
src/perftest_communication.c:	if (user_param->connection_type == UD)
src/perftest_communication.c:	conn_param.retry_count = user_param->retry_count;
src/perftest_communication.c:	user_param->work_rdma_cm = temp;
src/perftest_communication.c:	if (user_param->work_rdma_cm == OFF) {
src/perftest_communication.c:	} else if (user_param->connection_type == UD) {
src/perftest_communication.c:		if (user_param->tst == LAT || (user_param->tst == BW && user_param->duplex)) {
src/perftest_communication.c:	if (user_param->work_rdma_cm && user_param->connection_type == UD) {
src/perftest_communication.c:		if (user_param->tst == LAT || (user_param->tst == BW && user_param->duplex)) {
src/perftest_communication.c:	comm->rdma_params->port		   	= user_param->port;
src/perftest_communication.c:	comm->rdma_params->gid_index   		= user_param->gid_index;
src/perftest_communication.c:	comm->rdma_params->gid_index2 		= user_param->gid_index2;
src/perftest_communication.c:	comm->rdma_params->use_rdma_cm 		= user_param->use_rdma_cm;
src/perftest_communication.c:	comm->rdma_params->servername  		= user_param->servername;
src/perftest_communication.c:	comm->rdma_params->machine 	   	= user_param->machine;
src/perftest_communication.c:	comm->rdma_params->verb		   	= user_param->verb;
src/perftest_communication.c:	comm->rdma_params->use_mcg	   	= user_param->use_mcg;
src/perftest_communication.c:	comm->rdma_params->duplex	   	= user_param->duplex;
src/perftest_communication.c:	comm->rdma_params->use_xrc	   	= user_param->use_xrc;
src/perftest_communication.c:	comm->rdma_params->connection_type	= user_param->connection_type;
src/perftest_communication.c:	comm->rdma_params->output      		= user_param->output;
src/perftest_communication.c:	comm->rdma_params->report_per_port 	= user_param->report_per_port;
src/perftest_communication.c:	comm->rdma_params->retry_count		= user_param->retry_count;
src/perftest_communication.c:	comm->rdma_params->mr_per_qp		= user_param->mr_per_qp;
src/perftest_communication.c:	comm->rdma_params->dlid			= user_param->dlid;
src/perftest_communication.c:	comm->rdma_params->cycle_buffer         = user_param->cycle_buffer;
src/perftest_communication.c:	if (user_param->use_rdma_cm) {
src/perftest_communication.c:		ALLOCATE(comm->rdma_ctx->mr, struct ibv_mr*, user_param->num_of_qps);
src/perftest_communication.c:		ALLOCATE(comm->rdma_ctx->buf, void* , user_param->num_of_qps);
src/perftest_communication.c:		comm->rdma_ctx->buff_size = user_param->cycle_buffer;
src/perftest_communication.c:	if (!user_param->dont_xchg_versions) {
src/perftest_communication.c:		if (ctx_xchg_data(user_comm,(void*)(&user_param->version),(void*)(&user_param->rem_version),sizeof(user_param->rem_version))) {
src/perftest_communication.c:	int m_cycle_buffer = hton_int(user_param->cycle_buffer);
src/perftest_communication.c:	int m_cache_line_size = hton_int(user_param->cache_line_size);
src/perftest_communication.c:	if ( !(atof(user_param->rem_version) >= 5.32) ) {
src/perftest_communication.c:	if (!user_param->dont_xchg_versions) {
src/perftest_communication.c:		if (ctx_xchg_data(user_comm,(void*)(&m_cycle_buffer),(void*)(&rem_cycle_buffer), sizeof(user_param->cycle_buffer))) {
src/perftest_communication.c:		if (ctx_xchg_data(user_comm,(void*)(&m_cache_line_size),(void*)(&rem_cache_line_size), sizeof(user_param->cache_line_size))) {
src/perftest_communication.c:	user_param->cycle_buffer = (rem_cycle_buffer > user_param->cycle_buffer) ? rem_cycle_buffer : user_param->cycle_buffer;
src/perftest_communication.c:	user_param->cache_line_size = (rem_cache_line_size > user_param->cache_line_size) ? rem_cache_line_size : user_param->cache_line_size;
src/perftest_communication.c:	if (user_param->use_rdma_cm) {
src/perftest_communication.c:		user_comm->rdma_ctx->buff_size = user_param->cycle_buffer;
src/perftest_communication.c:	float rem_vers = atof(user_param->rem_version);
src/perftest_communication.c:	if (user_param->connection_type == RawEth) {
src/perftest_communication.c:		curr_mtu = (int) (set_mtu(context,user_param->ib_port,user_param->mtu));
src/perftest_communication.c:		if (!user_param->dont_xchg_versions) {
src/perftest_communication.c:				user_param->curr_mtu = (enum ibv_mtu)((valid_mtu_size(rem_mtu) && (curr_mtu > rem_mtu)) ? rem_mtu : curr_mtu);
src/perftest_communication.c:				user_param->curr_mtu = (enum ibv_mtu)(curr_mtu);
src/perftest_communication.c:			user_param->curr_mtu = (enum ibv_mtu)(curr_mtu);
src/perftest_communication.c:	if (user_param->connection_type == UD && user_param->size > MTU_SIZE(user_param->curr_mtu)) {
src/perftest_communication.c:		if (user_param->test_method == RUN_ALL || !user_param->req_size) {
src/perftest_communication.c:			fprintf(stderr," Max msg size in UD is MTU %lu\n",MTU_SIZE(user_param->curr_mtu));
src/perftest_communication.c:			user_param->size = MTU_SIZE(user_param->curr_mtu);
src/perftest_communication.c:	if (user_param->connection_type == RawEth){
src/perftest_communication.c:		if (user_param->size > user_param->curr_mtu) {
src/perftest_communication.c:			fprintf(stderr," Max msg size in RawEth is MTU %d\n",user_param->curr_mtu);
src/perftest_communication.c:			user_param->size = user_param->curr_mtu;
src/perftest_communication.c:		} else if (user_param->size < RAWETH_MIN_MSG_SIZE) {
src/perftest_communication.c:			user_param->size = RAWETH_MIN_MSG_SIZE;
src/perftest_communication.c:	sprintf(port, "%d", user_param->port);
src/perftest_communication.c:	rc = rdma_getaddrinfo(user_param->servername, port, hints, rai);
src/perftest_communication.c:	needed = ((user_param->connection_type == UD)
src/perftest_communication.c:				&& ((user_param->tst == BW && user_param->duplex)
src/perftest_communication.c:					|| (user_param->tst == LAT)));
src/perftest_communication.c:	needed = ((user_param->connection_type == UD)
src/perftest_communication.c:				&& ((user_param->tst == BW && user_param->duplex)
src/perftest_communication.c:					|| (user_param->tst == LAT)));
src/perftest_communication.c:	needed = user_param->connection_type == UD;
src/perftest_communication.c:	if ((user_param->tst == BW && user_param->duplex)
src/perftest_communication.c:		|| (user_param->tst == LAT)) {
src/perftest_communication.c:	if (user_param->tos != DEF_TOS) {
src/perftest_communication.c:			RDMA_OPTION_ID_TOS, &user_param->tos, sizeof(uint8_t));
src/perftest_communication.c:	if (user_param->verb == READ || user_param->verb == ATOMIC) {
src/perftest_communication.c:		conn_param.responder_resources = user_param->out_reads;
src/perftest_communication.c:		conn_param.initiator_depth = user_param->out_reads;
src/perftest_communication.c:	conn_param.retry_count = user_param->retry_count;
src/perftest_communication.c:	conn_param.rnr_retry_count = user_param->retry_count;
src/perftest_communication.c:	if (connection_index == user_param->num_of_qps) {
src/perftest_communication.c:	if (user_param->verb == READ || user_param->verb == ATOMIC) {
src/perftest_communication.c:		conn_param.responder_resources = user_param->out_reads;
src/perftest_communication.c:		conn_param.initiator_depth = user_param->out_reads;
src/perftest_communication.c:	conn_param.retry_count = user_param->retry_count;
src/perftest_communication.c:	conn_param.rnr_retry_count = user_param->retry_count;
src/perftest_communication.c:	if (user_param->machine == CLIENT) {
src/perftest_communication.c:		|| user_param->connection_type == UD)
src/perftest_communication.c:	for (i = 0; i < user_param->num_of_qps; i++) {
src/perftest_communication.c:	for (i = 0; i < user_param->num_of_qps; i++) {
src/perftest_communication.c:	ctx->cma_master.connects_left = user_param->num_of_qps;
src/perftest_communication.c:	if (user_param->machine == CLIENT) {
src/raw_ethernet_resources.c:		int ip_size = get_ip_size(user_param->raw_ipv6);
src/raw_ethernet_resources.c:		if (user_param->output != FULL_VERBOSITY) {
src/raw_ethernet_resources.c:		if (user_param->is_server_ip && user_param->is_client_ip) {
src/raw_ethernet_resources.c:			if (!user_param->raw_ipv6) {
src/raw_ethernet_resources.c:		if (user_param->is_server_port && user_param->is_client_port) {
src/raw_ethernet_resources.c:	if (user_param->output != FULL_VERBOSITY)
src/raw_ethernet_resources.c:	user_param->print_eth_func((struct ETH_header*)pkt);
src/raw_ethernet_resources.c:	if(user_param->is_client_ip || user_param->is_server_ip) {
src/raw_ethernet_resources.c:		if (user_param->raw_ipv6)
src/raw_ethernet_resources.c:	if(user_param->is_client_port && user_param->is_server_port) {
src/raw_ethernet_resources.c:		if (user_param->raw_ipv6)
src/raw_ethernet_resources.c:		if (user_param->tcp)
src/raw_ethernet_resources.c:	int have_ip_header = user_param->is_client_ip || user_param->is_server_ip;
src/raw_ethernet_resources.c:	int is_udp_or_tcp = user_param->is_client_port && user_param->is_server_port;
src/raw_ethernet_resources.c:	if(user_param->vlan_pcp==VLAN_PCP_VARIOUS) {
src/raw_ethernet_resources.c:		vlan_pcp = user_param->vlan_pcp;
src/raw_ethernet_resources.c:	if(user_param->vlan_en) {
src/raw_ethernet_resources.c:		if (user_param->raw_ipv6)
src/raw_ethernet_resources.c:					pkt_size, user_param->hop_limit, user_param->tos,
src/raw_ethernet_resources.c:					is_udp_or_tcp, user_param->tcp);
src/raw_ethernet_resources.c:					ip_next_protocol, pkt_size, user_param->hop_limit, user_param->tos, offset);
src/raw_ethernet_resources.c:		if (user_param->raw_ipv6)
src/raw_ethernet_resources.c:		if (user_param->tcp)
src/raw_ethernet_resources.c:	int print_flag = (user_param->vlan_pcp==VLAN_PCP_VARIOUS) ? PRINT_ON:PRINT_OFF;
src/raw_ethernet_resources.c:	uint16_t vlan_tag_size = user_param->vlan_en ? 4 : 0;
src/raw_ethernet_resources.c:	uint16_t eth_type = user_param->is_ethertype ? user_param->ethertype :
src/raw_ethernet_resources.c:		(user_param->is_client_ip || user_param->is_server_ip ?
src/raw_ethernet_resources.c:		 (user_param->raw_ipv6) ? IP6_ETHER_TYPE :
src/raw_ethernet_resources.c:	if(user_param->is_client_port && user_param->is_server_port)
src/raw_ethernet_resources.c:		ip_next_protocol = (user_param->tcp ? TCP_PROTOCOL : UDP_PROTOCOL);
src/raw_ethernet_resources.c:	if (user_param->tst == BW || user_param->tst == LAT_BY_BW) {
src/raw_ethernet_resources.c:		for (i = 0; i < user_param->flows; i++) {
src/raw_ethernet_resources.c:	} else if (user_param->tst == LAT) {
src/raw_ethernet_resources.c:		for (i = 0; i < user_param->flows; i++) {
src/raw_ethernet_resources.c:		tot_size += get_ip_size(user_param->raw_ipv6);
src/raw_ethernet_resources.c:		tot_size += get_ip_size(user_param->raw_ipv6);
src/raw_ethernet_resources.c:	if(user_param->machine == SERVER) {
src/raw_ethernet_resources.c:		if (user_param->raw_ipv6) {
src/raw_ethernet_resources.c:			       user_param->server_ip6, 16);
src/raw_ethernet_resources.c:			       user_param->client_ip6, 16);
src/raw_ethernet_resources.c:			if (user_param->tos != DEF_TOS) {
src/raw_ethernet_resources.c:					user_param->tos;
src/raw_ethernet_resources.c:			if (user_param->flow_label) {
src/raw_ethernet_resources.c:					htonl(user_param->flow_label);
src/raw_ethernet_resources.c:			ipv4_spec->val.dst_ip = user_param->server_ip;
src/raw_ethernet_resources.c:			ipv4_spec->val.src_ip = user_param->client_ip;
src/raw_ethernet_resources.c:			if (user_param->tos != DEF_TOS) {
src/raw_ethernet_resources.c:				ipv4_spec->val.tos = user_param->tos;
src/raw_ethernet_resources.c:	if (user_param->raw_ipv6) {
src/raw_ethernet_resources.c:	if (user_param->raw_ipv6) {
src/raw_ethernet_resources.c:	int is_ip = user_param->is_server_ip || user_param->is_client_ip;
src/raw_ethernet_resources.c:	int is_port = user_param->is_server_port || user_param->is_client_port;
src/raw_ethernet_resources.c:	attr_info->port = user_param->ib_port;
src/raw_ethernet_resources.c:	mac_from_user(spec_info->eth.val.dst_mac, &(user_param->source_mac[0]), sizeof(user_param->source_mac));
src/raw_ethernet_resources.c:	if(user_param->is_server_ip || user_param->is_client_ip) {
src/raw_ethernet_resources.c:	if(user_param->is_server_port && user_param->is_client_port) {
src/raw_ethernet_resources.c:		header_buff = header_buff + get_ip_size(user_param->raw_ipv6);
src/raw_ethernet_resources.c:		spec_info->tcp_udp.type = (user_param->tcp) ? IBV_EXP_FLOW_SPEC_TCP : IBV_EXP_FLOW_SPEC_UDP;
src/raw_ethernet_resources.c:		spec_info->tcp_udp.type = (user_param->tcp) ? IBV_FLOW_SPEC_TCP : IBV_FLOW_SPEC_UDP;
src/raw_ethernet_resources.c:		if(user_param->machine == SERVER) {
src/raw_ethernet_resources.c:	if (user_param->is_ethertype) {
src/raw_ethernet_resources.c:		spec_info->eth.val.ether_type = htons(user_param->ethertype);
src/raw_ethernet_resources.c:	int				allowed_server_ports = MAX_FS_PORT - user_param->server_port;
src/raw_ethernet_resources.c:	for (qp_index = 0; qp_index < user_param->num_of_qps; qp_index++) {
src/raw_ethernet_resources.c:				local_port = user_param->local_port + flow_index;
src/raw_ethernet_resources.c:				remote_port = user_param->remote_port;
src/raw_ethernet_resources.c:				local_port = user_param->local_port;
src/raw_ethernet_resources.c:				remote_port = user_param->remote_port + flow_index - last_local_index;
src/raw_ethernet_resources.c:	if (user_param->machine == SERVER || user_param->duplex) {
src/raw_ethernet_resources.c:		for (flow_index = 0; flow_index < user_param->flows; flow_index++)
src/raw_ethernet_resources.c:					  user_param, user_param->server_port + flow_index, user_param->client_port + flow_index);
src/raw_ethernet_resources.c:	if (user_param->machine == CLIENT || user_param->duplex) {
src/raw_ethernet_resources.c:		mac_from_user(my_dest_info->mac , &(user_param->source_mac[0]) , sizeof(user_param->source_mac) );
src/raw_ethernet_resources.c:		mac_from_user(rem_dest_info->mac , &(user_param->dest_mac[0]) , sizeof(user_param->dest_mac) );
src/raw_ethernet_resources.c:		if(user_param->is_client_ip) {
src/raw_ethernet_resources.c:			if(user_param->machine == CLIENT) {
src/raw_ethernet_resources.c:				if (!user_param->raw_ipv6)
src/raw_ethernet_resources.c:					my_dest_info->ip = user_param->client_ip;
src/raw_ethernet_resources.c:					       &(user_param->client_ip6[0]),
src/raw_ethernet_resources.c:					       sizeof(user_param->client_ip6));
src/raw_ethernet_resources.c:				if (!user_param->raw_ipv6)
src/raw_ethernet_resources.c:					my_dest_info->ip = user_param->server_ip;
src/raw_ethernet_resources.c:					       &(user_param->server_ip6[0]),
src/raw_ethernet_resources.c:					       sizeof(user_param->server_ip6));
src/raw_ethernet_resources.c:		if(user_param->machine == CLIENT) {
src/raw_ethernet_resources.c:			if (!user_param->raw_ipv6)
src/raw_ethernet_resources.c:				rem_dest_info->ip = user_param->server_ip;
src/raw_ethernet_resources.c:				       &(user_param->server_ip6[0]),
src/raw_ethernet_resources.c:				       sizeof(user_param->server_ip6));
src/raw_ethernet_resources.c:			my_dest_info->port = user_param->client_port;
src/raw_ethernet_resources.c:			rem_dest_info->port = user_param->server_port;
src/raw_ethernet_resources.c:		if(user_param->machine == SERVER && user_param->duplex) {
src/raw_ethernet_resources.c:			if (!user_param->raw_ipv6)
src/raw_ethernet_resources.c:				rem_dest_info->ip = user_param->client_ip;
src/raw_ethernet_resources.c:				       &(user_param->client_ip6[0]),
src/raw_ethernet_resources.c:				       sizeof(user_param->client_ip6));
src/raw_ethernet_resources.c:			my_dest_info->port = user_param->server_port;
src/raw_ethernet_resources.c:			rem_dest_info->port = user_param->client_port;
src/raw_ethernet_resources.c:	int 			rwqe_sent = user_param->rx_depth;
src/raw_ethernet_resources.c:	ALLOCATE(rcnt_for_qp,uint64_t,user_param->num_of_qps);
src/raw_ethernet_resources.c:	memset(rcnt_for_qp, 0, sizeof(uint64_t) * user_param->num_of_qps);
src/raw_ethernet_resources.c:	tot_iters = (uint64_t)user_param->iters * user_param->num_of_qps;
src/raw_ethernet_resources.c:	iters = user_param->iters;
src/raw_ethernet_resources.c:	if (user_param->noPeak == ON)
src/raw_ethernet_resources.c:		user_param->tposted[0] = get_cycles();
src/raw_ethernet_resources.c:	if(user_param->test_type == DURATION && user_param->machine == CLIENT && firstRx) {
src/raw_ethernet_resources.c:		user_param->iters = 0;
src/raw_ethernet_resources.c:		alarm(user_param->margin);
src/raw_ethernet_resources.c:	while ((user_param->test_type == DURATION && user_param->state != END_STATE) || totccnt < tot_iters || totrcnt < tot_iters) {
src/raw_ethernet_resources.c:		for (index = 0; index < user_param->num_of_qps; index++) {
src/raw_ethernet_resources.c:			while (((ctx->scnt[index] < iters) || ((firstRx == OFF) && (user_param->test_type == DURATION))) &&
src/raw_ethernet_resources.c:					((ctx->scnt[index] - ctx->ccnt[index]) < user_param->tx_depth) && (rcnt_for_qp[index] - ctx->scnt[index] > 0)) {
src/raw_ethernet_resources.c:				if (user_param->post_list == 1 && (ctx->scnt[index] % user_param->cq_mod == 0 && user_param->cq_mod > 1)) {
src/raw_ethernet_resources.c:					if (user_param->verb_type == ACCL_INTF)
src/raw_ethernet_resources.c:						if (user_param->use_exp == 1)
src/raw_ethernet_resources.c:				if (user_param->noPeak == OFF)
src/raw_ethernet_resources.c:					user_param->tposted[totscnt] = get_cycles();
src/raw_ethernet_resources.c:				if (user_param->test_type == DURATION && duration_param->state == END_STATE)
src/raw_ethernet_resources.c:				switch_smac_dmac(ctx->wr[index*user_param->post_list].sg_list);
src/raw_ethernet_resources.c:				if (user_param->verb_type == ACCL_INTF) {
src/raw_ethernet_resources.c:					struct ibv_sge *sg_l = ctx->exp_wr[index*user_param->post_list].sg_list;
src/raw_ethernet_resources.c:					if (user_param->use_exp == 1) {
src/raw_ethernet_resources.c:							&ctx->exp_wr[index*user_param->post_list], &bad_exp_wr);
src/raw_ethernet_resources.c:							&ctx->wr[index*user_param->post_list],&bad_wr);
src/raw_ethernet_resources.c:				err = ibv_post_send(ctx->qp[index], &ctx->wr[index*user_param->post_list], &bad_wr);
src/raw_ethernet_resources.c:				if (user_param->post_list == 1 && user_param->size <= (ctx->cycle_buffer / 2)) {
src/raw_ethernet_resources.c:					if (user_param->use_exp == 1)
src/raw_ethernet_resources.c:						increase_loc_addr(ctx->exp_wr[index].sg_list, user_param->size,
src/raw_ethernet_resources.c:						increase_loc_addr(ctx->wr[index].sg_list, user_param->size,
src/raw_ethernet_resources.c:				ctx->scnt[index] += user_param->post_list;
src/raw_ethernet_resources.c:				totscnt += user_param->post_list;
src/raw_ethernet_resources.c:				if (user_param->post_list == 1 &&
src/raw_ethernet_resources.c:					(ctx->scnt[index]%user_param->cq_mod == (user_param->cq_mod - 1) ||
src/raw_ethernet_resources.c:						(user_param->test_type == ITERATIONS && ctx->scnt[index] == (iters - 1)))) {
src/raw_ethernet_resources.c:					if (user_param->verb_type == ACCL_INTF)
src/raw_ethernet_resources.c:						if (user_param->use_exp == 1)
src/raw_ethernet_resources.c:		if (user_param->use_event) {
src/raw_ethernet_resources.c:		if ((user_param->test_type == ITERATIONS && (totrcnt < tot_iters)) ||
src/raw_ethernet_resources.c:			(user_param->test_type == DURATION && user_param->state != END_STATE)) {
src/raw_ethernet_resources.c:			if (user_param->verb_type == ACCL_INTF)
src/raw_ethernet_resources.c:				if (user_param->machine == SERVER && firstRx && user_param->test_type == DURATION) {
src/raw_ethernet_resources.c:					user_param->iters = 0;
src/raw_ethernet_resources.c:					alarm(user_param->margin);
src/raw_ethernet_resources.c:					wc_id = (user_param->verb_type == ACCL_INTF) ?
src/raw_ethernet_resources.c:					if (user_param->verb_type != ACCL_INTF) {
src/raw_ethernet_resources.c:		if ((totccnt < tot_iters) || (user_param->test_type == DURATION && user_param->state != END_STATE)) {
src/raw_ethernet_resources.c:			if (user_param->verb_type == ACCL_INTF)
src/raw_ethernet_resources.c:					wc_id = (user_param->verb_type == ACCL_INTF) ?
src/raw_ethernet_resources.c:					if (user_param->verb_type != ACCL_INTF) {
src/raw_ethernet_resources.c:					totccnt += user_param->cq_mod;
src/raw_ethernet_resources.c:					ctx->ccnt[wc_id] += user_param->cq_mod;
src/raw_ethernet_resources.c:					if (user_param->noPeak == OFF) {
src/raw_ethernet_resources.c:						if ((user_param->test_type == ITERATIONS && (totccnt >= tot_iters - 1)))
src/raw_ethernet_resources.c:							user_param->tcompleted[tot_iters - 1] = get_cycles();
src/raw_ethernet_resources.c:							user_param->tcompleted[totccnt - 1] = get_cycles();
src/raw_ethernet_resources.c:					if (user_param->test_type == DURATION && user_param->state == SAMPLE_STATE)
src/raw_ethernet_resources.c:						user_param->iters += user_param->cq_mod;
src/raw_ethernet_resources.c:			while (rwqe_sent - totccnt < user_param->rx_depth) {    /* Post more than buffer_size */
src/raw_ethernet_resources.c:				if (user_param->test_type==DURATION ||
src/raw_ethernet_resources.c:					rcnt_for_qp[0] + user_param->rx_depth <= user_param->iters) {
src/raw_ethernet_resources.c:					if (user_param->verb_type == ACCL_INTF) {
src/raw_ethernet_resources.c:					if (SIZE(user_param->connection_type, user_param->size, !(int)user_param->machine) <= (ctx->cycle_buffer / 2)) {
src/raw_ethernet_resources.c:								user_param->size,
src/raw_ethernet_resources.c:								ctx->rx_buffer_addr[0],user_param->connection_type,
src/raw_ethernet_resources.c:	if (user_param->noPeak == ON && user_param->test_type == ITERATIONS)
src/raw_ethernet_resources.c:		user_param->tcompleted[0] = get_cycles();
